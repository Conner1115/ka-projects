/**DO NOT DELETE**/
function openLive(){
    var a = window.open("","");
    a.document.open();
    a.document.write("<!DOCTYPE html>"+document.documentElement.outerHTML.replaceAll("KAInfiniteLoopProtect();",""));
    a.document.close();
}
document.body.onload = function(){
    document.querySelector("#loader").style.display = "none";
}
/**DO NOT DELETE**/

var scene = "game";
var bbar;
var wave = 0;
var money = 10000;
var level = 0;
var lives = 100;
var csr;
var enemies = [];
var kills = 0;
var keys = [];
var towers = [];
var bullets = [];
var clicked = false;
var fps = 0;
var towerMenu = false;
var canStartWave = true;
var waveStarted = false;
var deathCount = 0;
var spawnCount = 0;
var eInt = 25;
var towerSelected = false;
var canPlaceTower = false;
var waves = [
    ["6", "Wave 1"],
    ["01", "Wave 2", 50],
];
var eTypes = {
    "0": "enemy1",
    "1": "enemy2",
    "2": "enemy3",
    "3": "enemy4",
    "4": "enemy5",
    "5": "enemy6",
    "6": "enemy7",
};
var levelBitmaps = [
    [
        '                        ',
        '--w/.q---w p}}}}ß  SS.  ',
        'ßo|[S| c | {q----w [[S  ',
        '{{|[[| [ | {| z].| [[   ',
        'ß{|[S| S | C| zc[| [[ q-',
        '{{|[[|q--v-Ts z];| [[ | ',
        'ß9|"S|a----+-----s cc | ',
        ' Ca--sXXXXXa----------sC',
        ' 0}ß}}9   0}}}}}}}ß}}}}9',
        '                        ',
    ],
];
var levelTracks = [
    [
        [
            [-50, 75],
            [125, 75],
            [125, 375],
            [275, 375],
            [275, 75],
            [475, 75],
            [475, 275],
            [625, 275],
            [625, 125],
            [875, 125],
            [875, 325],
            [325, 325],
            [325, 275],
            [575, 275],
            [575, 375],
            [1125, 375],
            [1125, 225],
            [1250, 225],
            [1251, 225],
        ],
    ],
];

var palette = { "0": "rgb(0,0,0)", "1": "rgb(25,25,25)", "2": "rgb(50,50,50)", "3": "rgb(75,75,75)", "4": "rgb(100,100,100)", "5": "rgb(125,125,125)", "6": "rgb(150,150,150)", "7": "rgb(175,175,175)", "8": "rgb(200,200,200)", "9": "rgb(225,225,225)", " ": "rgba(0,0,0,0)", "⇲": "rgb(255,255,255)", "a": "rgb(255,0,0)", "b": "rgb(225,0,0)", "c": "rgb(200,0,0)", "d": "rgb(175,0,0)", "e": "rgb(150,0,0)", "f": "rgb(125,0,0)", "g": "rgb(100,0,0)", "h": "rgb(75,0,0)", "i": "rgb(50,0,0)", "j": "rgb(25,0,0)", "↘︎": "rgb(255,225,200)", "➘": "rgb(225,200,175)", "⇘": "rgb(200,175,150)", "⬂": "rgb(175,150,125)", "⬊": "rgb(150,125,100)", "→": "rgb(255,150,0)", "⇒": "rgb(225,125,0)", "⟹": "rgb(200,100,0)", "⇨": "rgb(175,75,0)", "⇾": "rgb(150,50,0)", "➾": "rgb(125,25,0)", "¡": "rgb(255,200,0)", "™": "rgb(225,175,0)", "£": "rgb(200,150,0)", "¢": "rgb(175,125,0)", "∞": "rgb(150,100,0)", "§": "rgb(125,75,0)", "¶": "rgb(100,50,0)", "•": "rgb(75,25,0)", "ª": "rgb(50,25,0)", "º": "rgb(75,50,0)", "‹": "rgb(100,75,0)", "€": "rgb(125,100,0)", "›": "rgb(150,125,0)", "#": "rgb(255,255,0)", "$": "rgb(225,225,0)", "%": "rgb(200,200,0)", "^": "rgb(175,175,0)", "&": "rgb(150,150,0)", "*": "rgb(125,125,0)", "(": "rgb(100,100,0)", ")": "rgb(75,75,0)", "-": "rgb(50,50,0)", "_": "rgb(25,25,0)", "←": "rgb(150,255,0)", "⇐": "rgb(125,225,0)", "⟸": "rgb(100,200,0)", "⇦": "rgb(75,175,0)", "⇽": "rgb(50,150,0)", "⇠": "rgb(25,125,0)", "k": "rgb(0,255,0)", "l": "rgb(0,225,0)", "m": "rgb(0,200,0)", "n": "rgb(0,175,0)", "o": "rgb(0,150,0)", "p": "rgb(0,125,0)", "q": "rgb(0,100,0)", "r": "rgb(0,75,0)", "s": "rgb(0,50,0)", "t": "rgb(0,25,0)", "↑": "rgb(0,255,150)", "⇑": "rgb(0,225,125)", "⇡": "rgb(0,200,100)", "☝︎": "rgb(0,175,75)", "⬆︎": "rgb(0,150,50)", "⇧": "rgb(0,125,25)", "+": "rgb(0,255,255)", "=": "rgb(0,225,225)", "Q": "rgb(0,200,200)", "W": "rgb(0,175,175)", "E": "rgb(0,150,150)", "R": "rgb(0,125,125)", "T": "rgb(0,100,100)", "Y": "rgb(0,75,75)", "U": "rgb(0,50,50)", "I": "rgb(0,25,25)", "↓": "rgb(0,150,255)", "⇓": "rgb(0,125,225)", "⇩": "rgb(0,100,200)", "⇣": "rgb(0,75,175)", "☟": "rgb(0,50,150)", "⬇︎": "rgb(0,25,125)", "u": "rgb(0,0,255)", "v": "rgb(0,0,225)", "w": "rgb(0,0,200)", "x": "rgb(0,0,175)", "y": "rgb(0,0,150)", "z": "rgb(0,0,125)", "`": "rgb(0,0,100)", "~": "rgb(0,0,75)", "!": "rgb(0,0,50)", "@": "rgb(0,0,25)", "ƌ": "rgb(150,0,255)", "⇔": "rgb(125,0,225)", "⟺": "rgb(100,0,200)", "⬄": "rgb(75,0,175)", "⇿": "rgb(50,0,150)", "⬌": "rgb(25,0,125)", "O": "rgb(255,0,255)", "P": "rgb(225,0,225)", "A": "rgb(200,0,200)", "S": "rgb(175,0,175)", "D": "rgb(150,0,150)", "F": "rgb(125,0,125)", "G": "rgb(100,0,100)", "H": "rgb(75,0,75)", "J": "rgb(50,0,50)", "K": "rgb(25,0,25)", "↕︎": "rgb(255,0,150)", "⇕": "rgb(225,0,125)", "⇳": "rgb(200,0,100)", "⬍": "rgb(175,0,75)", "⥌": "rgb(150,0,50)", "⥍": "rgb(125,0,25)", "L": "rgb(255,75,0)", "Z": "rgb(225,100,0)", "X": "rgb(200,125,0)", "C": "rgb(175,150,0)", "V": "rgb(150,175,0)", "B": "rgb(125,200,0)", "N": "rgb(100,225,0)", "M": "rgb(75,255,0)", "[": "rgb(0,255,75)", "]": "rgb(0,225,100)", "ᚸ": "rgb(0,200,125)", "✡︎": "rgb(0,175,150)", "'": "rgb(0,150,175)", ",": "rgb(0,125,200)", ".": "rgb(0,100,225)", "/": "rgb(0,75,255)", "{": "rgb(75,0,255)", "}": "rgb(100,0,225)", "|": "rgb(125,0,200)", ":": "rgb(150,0,175)", "ᚢ": "rgb(175,0,150)", "℃": "rgb(200,0,125)", "℉": "rgb(225,0,100)", "?": "rgb(255,0,75)", "ȡ": "rgba(150,0,255,0.8)", "Ȣ": "rgba(150,0,255,0.7)", "ⱴ": "rgba(150,0,255,0.6)", "Ɂ": "rgba(150,0,255,0.5)", "⁊": "rgba(150,0,255,0.4)", "⸘": "rgba(150,0,255,0.3)", "‽": "rgba(150,0,255,0.2)", "⤿": "rgba(255,150,0,0.8)", "⤾": "rgba(255,150,0,0.6)", "⟳": "rgba(255,150,0,0.4)", "↻": "rgba(255,150,0,0.2)" };

var art = {
    tmenu: "    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555;    255555",
    base1: "     2222222222     ;     2333WW3332     ;     234===W332     ;    2346====6332    ;   234556=W655332   ;222345556=W655533222;233455556=W655553332;234655556=W655556332;23WW66666WW66666WW32;2W==WWWWW++WWWWW==W2;2=======W++W=======2;23==66666WW66666==32;233655556=W655556432;233355556=W655554332;222335556=W655543222;   233556=W655432   ;    2336W==W6432    ;     233====332     ;     2333==3332     ;     2222222222     ",
    base2: "                    ; 223   555555   322 ; 2⇩⇩355882299553⇩⇩2 ; 3⇩⇓5788822999⇲5⇓⇩3 ;  35⇓778822999⇲⇓53  ;  577⇓7882299⇲⇓995  ;  5777⇓78229⇲⇓9995  ; 566666⇓2222⇓998885 ; 5666662⇓↓↓⇓2988885 ; 5222222↓↓↓↓2222225 ; 5222222↓↓↓↓2222225 ; 5666662⇓↓↓⇓2777775 ; 566688⇓2222⇓666775 ;  5688⇓652255⇓6665  ;  588⇓86522455⇓665  ;  35⇓8865224445⇓53  ; 3⇩⇓586652244455⇓⇩3 ; 2⇩⇩355652244553⇩⇩2 ; 223   555555   322 ;                    ",
    base3: "                    ; 223   555555   322 ; 2dd355882299553dd2 ; 3db5788822999⇲5bd3 ;  35b778822999⇲b53  ;  577b7882299⇲b995  ;  5777b78229⇲b9995  ; 566666b2222b998885 ; 5666662baab2988885 ; 5222222aaaa2222225 ; 5222222aaaa2222225 ; 5666662baab2777775 ; 566688b2222b666775 ;  5688b652255b6665  ;  588b86522455b665  ;  35b8865224445b53  ; 3db586652244455bd3 ; 2dd355652244553dd2 ; 223   555555   322 ;                    ",
    base4: "        1221        ;       552255       ;     5588889955     ;    578bb899bb⇲5    ;   577b8889999⇲⇲5   ;  577b78bbb99⇲bb95  ;  57b77b8899⇲⇲9995  ; 56b66b73333⇲99bb85 ;156b6b637aa739888851;22666b63aa⇲a3788b822;22666b63a⇲aa37b6b722;156b66637aa737b6b751; 56b6888333356b6b75 ;  568b8655445b66b5  ;  588b8b55bbb55b65  ;   5888b554444b55   ;    58665bbbbb55    ;     5565544455     ;       552255       ;        1221        ",
    base5: "        1221        ;       552255       ;     5588889955     ;    578bb899==⇲5    ;   577b8889999⇲⇲5   ;  577b78bbb99⇲==95  ;  57b77b8899⇲⇲9995  ; 56b66b73333⇲99==85 ;156b6b637aa739888851;22666b63aa⇲=3788=822;22666b63a⇲==37=6=722;156b66637==737=6=751; 56b6888333356=6=75 ;  568b8655445=66=5  ;  588b8b55===55=65  ;   5888b554444=55   ;    58665=====55    ;     5565544455     ;       552255       ;        1221        ",
    base6: "        1221        ;       552255       ;     5588889955     ;    578##899¡¡⇲5    ;   577#8889999⇲⇲5   ;  577#78###99⇲¡¡95  ;  57#77#8899⇲⇲9995  ; 56#66#73333⇲99¡¡85 ;156#6#637##739888851;22666#63##⇲¡3788¡822;22666#63#⇲¡¡37¡6¡722;156#66637¡¡737¡6¡751; 56#6888333356¡6¡75 ;  568#8655445¡66¡5  ;  588#8¡55¡¡¡55¡65  ;   5888¡554444¡55   ;    58665¡¡¡¡¡55    ;     5565544455     ;       552255       ;        1221        ",
    base7: "   6            6   ; 66766        77776 ; 679⇲7 555555 779⇲6 ;67779775333357777976; 6777753⇒33⇒3577776 ; 6677753→33→3577766 ;   655333→→333556   ;  5533333333333355  ;  53⇒⇒33⇒33⇒33⇒⇒35  ;  5333⇒33⇒⇒33⇒3335  ;  5333→33→→33→3335  ;  53→→33→33→33→→35  ;  5533333333333355  ;   655333⇒⇒333557   ; 7777653⇒33→3567777 ; 79⇲7753→33→35679⇲7 ;67797765333356777977; 67777 555555 67776 ; 66766        66766 ;   6            6   ",
    base8: "                    ; 223   555555   322 ; 2⟸⟸3558⇐22⇐9553⟸⟸2 ; 3⟸⇐5788⇐22⇐99⇲5⇐⟸3 ;  35⇐7⇐882299⇐⇲⇐53  ;  577⇐7882299⇲⇐995  ;  57⇐7⇐7⇐22⇐⇲⇐9⇐95  ; 566666⇐2222⇐998885 ; 5⇐⇐66⇐2⇐←←⇐2⇐88⇐⇐5 ; 5222222←←←←2222225 ; 5222222←←←←2222225 ; 5⇐⇐66⇐2⇐←←⇐2⇐77⇐⇐5 ; 566688⇐2222⇐666775 ;  56⇐8⇐6⇐2255⇐6⇐65  ;  588⇐86522455⇐665  ;  35⇐8⇐652244⇐5⇐53  ; 3⟸⇐5866⇐22⇐4455⇐⟸3 ; 2⟸⟸3556⇐22⇐4553⟸⟸2 ; 223   555555   322 ",
    base9: "        1221        ;       552255       ;     5588889955     ;    578⇑⇑899↑⇑⇲5    ;   577⇑8889999⇲⇲5   ;  577⇑78⇑⇑⇑99⇲↑⇑95  ;  57↑77⇑8899⇲⇲9995  ; 56↑66↑73333⇲99↑⇑85 ;156↑6↑637↑↑739888851;22666↑63↑↑⇲↑3788⇑822;22666↑63↑⇲↑↑37⇑6↑722;156⇑66637↑↑737↑6↑751; 56↑6888333356↑6↑75 ;  568⇑8655445⇑66↑5  ;  588↑8⇑55↑↑↑55⇑65  ;   5888↑554444⇑55   ;    58665↑↑↑↑↑55    ;     5565544455     ;       552255       ;        1221        ",

    particle1: " 3 3 ;3 3 3; 3 3 ;3 3 3; 3 3 ",
    particle2: "aa;aa",
    particle3: "++;++",
    particle4: "⤾⤿;⟳⤾",
    particle5: "↓⇓;⇓↓",
    particle6: "ⱴ⁊;⁊ⱴ",


    gun0: "  544443            ; 55444443           ;5544444444          ;5444444444445555555 ;5444444444444444445 ;5444444444444444444 ;5544444444333333333 ;5544444443          ; 55544443           ;  555333            ",
    gun1: "  544443            ; 5Q44QQ43           ;55=4444Q44          ;5444QQ44=4445555555 ;5Q4444Q4=44Q4Q4Q4Q5+;4=4444=4=4Q4Q4Q4Q4Q+;5544==44=4333333333 ;55Q4444Q43          ; 5=54==43           ;  555333            ",
    gun2: "  544443            ; 54====43           ;55=4444=44          ;5444==44444555555555;5=4=++============44;4=4+++++++++++++++44;5544++44443333333333;55=4444=43          ; 54====43           ;  555333            ",
    gun3: "  544443            ; 54====4333322      ;55=4444=44    23    ;5444==44444555555555;5=4=2+4=4==4===4===4;4=4+2+4=44===4===4==;5544++44443333333333;55=4444=43    23    ; 54====4333222      ;  555333            ",
    gun4: "  544443            ; 54====4555555555555;55=4444=4=4=4=4=4=4=;5444==44=43343343343;5=4=22==44  +  4  + ;4=4+22==44  4  +  4 ;5544++44=45555555555;55=4444=4=4=4=4=4=4=; 54====4333333333333;  555333            ",
    gun5: "  544443            ; 54====43           ;55=4444=43          ;5444==44=3 344 344  ;5=4=22==44 2=3 2=3  ;4=4+22==44 2=2 2=2  ;5544++44=45555555555;55=4444=4=4=4=4=4=4 ; 54====4333333333333;  555333            ",
    gun6: "  544443            ; 554ab443           ;55b4444b44          ;54a4bb44b444ba55ab5 ;5b444ab44b444444445 ;5a444aa44a444444444 ;55b4aa44a433ba33ab3 ;55a4444a43          ; 555ab443           ;  555333            ",
    gun7: "  544443            ; 55aab443           ;55b444ab44          ;54aabb4ab44 4 5 4 5 ;5b444ab44bbbb4bbb5b ;5a444aa44aa4aaa4aaa ;55baaa4aa43 3 3 3 3 ;55a444aa43          ; 55aab443           ;  555333            ",
    gun8: "  333555            ; 334ca4422222       ;334444c445   222    ;344c4aa4c555a5c55555;34c4c44c4c4a44accccc;54a4a44a4a4a44aaaaaf;544a4ca4a333a3a33333;554444a443   222    ; 554ac4422222       ;  555333            ",
    gun9: "  544b43            ; 55444443           ;5544b4b444444444555 ;544b4b4b44b33c3b335 ;5c44bbc44c4         ;544b4c4c44c         ;5544c4c444444444555 ;5544444443333c3b335 ; 5554c443           ;  555333            ",
    gun10: "  54d4d3            ; 55ccc443           ;55c444c444          ;5c44c44c4444ac5ac55 ;5c4c4c4ccccc444444a ;5a4a4a4a444aaaaaaaa ;5a4a444a44333333333 ;5544aaa443          ; 55544443           ;  55b3b3            ",
    gun11: "  2222222224444442  ; 24c44bbbbbbbbbbb42a;44c4c4c4466666664b4e;44c4c4c46       644a;4c444ccbbb4bbb4     ;4c444bb44bbb4bb     ;44b4b4b46       644a;44b4b4b4466666664b4e; 24b44bbbbbbbbbbb42a;  2222222224444442  ",
    gun12: "  5e4b4e            ; 5544e44e           ;55e4b4b444444444555b;5e4b4b4b44b33c3b335e;5c4ebeceec42222222e ;5e4b4c4c44c1111111b ;55e4c4c444444444555e;55444e44e3333c3b335b; 55e4c4e3           ;  555333            ",
    gun18: "  5444W3            ; 5544W443           ;55444QWW44          ;5QW4WQ44W4445555555 ;544Q44Q4WWWQQQQQQQ5 ;544e44e4eeeccccccc4 ;5ce4ee44e4333333333 ;55444cce43          ; 5554e443           ;  5553c3            ",
    gun14: "  544W43            ; 5544Q443           ;5WW4QQWW44          ;5Q4W44Q4W4445555555 ;544Q4d44QQQQQddbbb5 ;544d4Q44bbbbdQQQQQ4 ;5d4b44d4d4333333333 ;5bd4bbbd43          ; 5554b443           ;  555b33            ",
    gun15: "  5d4d43            ; 55b4b4d3           ;5b444444b4          ;54d4bbd444445555555 ;544b4444b4db4c4c4c5 ;544W4444W4WQ4Q4Q4Q4 ;55W4WQQ444333333333 ;5Q444444W3          ; 55W4W4Q3           ;  5Q5Q33            ",
    gun16: "  544443            ; 55c44443           ;554dcd44445dc55dc55 ;54c444dccc444444444 ;54d4c44444          ;54Q4Q44444          ;55W444WQQQ444444444 ;554QQW44433WQ33WQ33 ; 55W44443           ;  555533            ",
    gun17: "  544443            ; 55c44443           ;554dcd44445dc55dc55 ;54c444dccc444444444 ;54d4c444442⇔ƌ33⇔ƌ444;54Q4Q44444222⇔ƌ23⇔ƌ3;55W444WQQQ444444444 ;554QQW44433WQ33WQ33 ; 55W44443           ;  555533            ",
    gun26: "  555553333333333333; 553344433333™⇲##™™3;5543¡33434443™#¡¡⇲™3;553¡#¡¡34443¡⇲¡33¡#¡;53¡#⇲##¡3553¡#¡33¡⇲¡;53¡#⇲#¡#353¡⇲¡3553¡#;553¡#¡¡⇲¡33¡#¡3443¡⇲;5543¡3™™##¡⇲™344443¡; 554343™™##$™3333333;  555333333333333333",
    gun19: "  555553333333333333; 5533444333330000003;55430334344430ƌ00ƌ03;5530ƌ00344430⇲0330⇲0;530ƌ⇲⇲ƌ035530ƌ0330ƌ0;530ƌ⇲⇲ƌ03530ƌ035530⇲;5530ƌ00⇲0330⇲034430ƌ;55430300ƌ00ƌ03444430; 5543430000003333333;  555333333333333333",
    gun20: "  54⇒44444444       ; 55⇒44443   44      ;554444⇒⇒44          ;54⟹⟹444→44445⟹⇒555→ ;5⇒444444444444444→⇒ ;5⇒444444444444444⇒→ ;54⟹⟹444⇒44333⟹⇒333⇒ ;554444→⇒43          ; 55⇒44443   44      ;  55⇒33444444       ",
    gun21: "  54⇒44444⇒→4⇒→4    ; 554→44444333333    ;554444⇒→43          ;⇒→44444→44445555555 ;544444444444→444→4  ;5444444444⇒444⇒444  ;⇒→44444⇒44333333333 ;554444→→43          ; 555→44444444444    ;  55→33333→⇒3→⇒4    ",
    gun22: "  544443            ; 554→⇒443           ;55→⇒44⇒4444  4444  4;54→4444⇒→→→44⇒⇒→→44→;5444444444⇒→→4444→4⇒;544444444→4⇒⇒4444⇒⇒4;55→4444⇒→⇒⇒44→→⇒⇒44⇒;55→⇒44⇒4444  4444  4; 555⇒→443           ;  555333            ",
    gun23: "  555553333333333333; 553344433333⇒⇒⇒⇒⇒⇒3;5543⇒33434443→¡→¡→→3;553⇒→⇒⇒34443⇒¡→33→¡⇒;53⇒→¡⇲→⇒3553→¡⇒33⇒→→;53⇒→¡¡→⇒353⇒→→3553→¡;553⇒→→¡¡→33⇒¡⇒3443⇒→;5543⇒3⇒→¡¡→→→344443⇒; 554343⇒⇒⇒⇒⇒⇒3333333;  555333333333333333",
    gun24: "  222233334444444444; 2322333333334444444;232→→222233333222222;22→#%→→→→22222→→→→→→;2→##⇲™™™™→→→→→™#™™™™;2→$⇲$¡#¡#¡™™™™#¡¡¡#¡;22⇒#$⇒⇒⇒⇒¡#¡#¡⇒⇒⇒⇒⇒⇒;222⇒⇒2222⇒⇒⇒⇒⇒222222; 2222223322222333333;  222222222334444444",
    gun25: "  222233334444444444; 2322333333334444444;232↓↓222233333222222;22↓+Q↓↓↓↓22222↓↓↓↓↓↓;2↓++⇲QQQQ↓↓↓↓↓Q⇲QQQQ;2↓=⇲=+⇲+⇲+QQQQ⇲+++⇲+;22⇓+=⇓⇓⇓⇓+⇲+⇲+⇓⇓⇓⇓⇓⇓;222⇓⇓2222⇓⇓⇓⇓⇓222222; 2222223322222333333;  222222222334444444",
    gun13: "  54444444444a      ; 55aaaa44433333a    ;55a4444a43          ;5a44aa44a4445555555 ;5a4a44a4a4a4aa4a4aa ;5b4b44b4b4b4bb4b4bb ;5b44bb44b4333333333 ;55b4444b43          ; 55bbbb44444444a    ;  55533333333a      ",
    gun27: "  544443            ; 55↓↓⇓⇓43           ;5544444↓44          ;5444↓⇓44⇓4445555555 ;544444⇓4⇓⇓⇓↓↓↓↓↓↓↓5 ;54↓⇓⇓4↓4↓4444444444 ;5544444444333333333 ;554↓⇓4⇓↓43          ; 55544443           ;  555333            ",
    gun28: "  544443            ; 55⇓4⇓4⇓3           ;554↓4⇓4↓44          ;5⇓4↓4↓4↓44445555555 ;5⇓444↓444⇓⇓444⇓⇓⇓45 ;5↓⇓44↓44⇓44↓↓↓444↓4 ;55↓⇓444⇓↓4333333333 ;554↓⇓4⇓↓43          ; 555↓↓↓43           ;  555333            ",
    gun29: "  544443            ; 554↓⇓⇓43           ;5544444444          ;5⇓4⇓⇓⇓↓↓44445555555 ;5⇓4444444⇓⇓444⇓⇓⇓45 ;5↓⇓4⇓⇓↓4⇓44↓↓↓444↓4 ;55↓⇓444⇓↓4333333333 ;554↓⇓4⇓↓43          ; 555↓↓↓43           ;  555333            ",
    gun30: "  544443            ; 554↓↓4444↓44444444 ;55444↓4↓44↓↓↓↓↓↓↓↓4 ;54↓↓4↓4↓↓43333444↓4 ;544↓4↓44↓4          ;54↓↓4↓4↓↓4          ;55444↓4↓444444444↓4 ;5544↓↓4443↓↓↓↓↓↓↓↓4 ; 555444433↓33333333 ;  555333            ",
    gun31: "  544⇓43            ; 554↓⇓⇓444⇓44444444 ;55⇓44↓4⇓44⇓⇓↓↓↓↓↓↓4 ;54↓⇓4↓4↓⇓4333↓444↓4 ;544↓4↓44↓⇓          ;54⇓↓4↓4↓↓4          ;55↓44⇓4↓44444⇓444⇓4 ;5544⇓↓⇓443↓↓↓↓↓↓↓↓4 ; 5554↓4433↓33333333 ;  555333            ",
    gun32: "  544443            ; 5544$443           ;554$4$4444          ;544#4#4$$4445555555 ;5$4#4#$44$$######$5 ;5#44444444444444444 ;55$######4333333333 ;5544444443          ; 555$$#43           ;  555333            ",
    gun33: "  5$4443            ; 55$$##$3           ;5544444#44          ;5$$$444444445$$$$55 ;5$444$4$$4$$44$44$5 ;5#444#4##4##44#44#4 ;5###444444333$$$$33 ;5544444$43          ; 55###$$3           ;  5#5333            ",
    gun34: "  544443            ; 55#4#4#3           ;554#4#4#44          ;5##444444###555##55 ;5444#4#4#44##444445 ;5444$4$4$44$$444444 ;5$$444444$$$333$$33 ;554$4$4$43          ; 55$4$4$3           ;  555333            ",
    gun35: "  544443            ; 55⇐44⇐43           ;5⇐44⇐44⇐44          ;54⇐44←44←44⇐5555555 ;544←44←44←44←444445 ;544←44←44←44←444444 ;55⟸44←44←43⟸3333333 ;5⟸44⟸44⟸43          ; 55⟸44⟸43           ;  555333            ",
    gun36: "  544443            ; 55⇐⇐⇐⇐43           ;55←4444⇐44          ;5←44←←44←4⇐⇐5⇐⇐4⇐⇐5 ;544←44←444444444445 ;544←44←444444444444 ;5⟸44←←44⟸4⟸⟸3⟸⟸3⟸⟸3 ;55⟸4444⟸43          ; 55⟸⟸⟸⟸43           ;  555333            ",
    gun37: "  544443            ; 55⇐⇐⇐⇐43           ;5⇐⇐4444⇐44          ;5←44⇐⇐44⇐4445555555 ;5←4444⇐44⇐⇐⇐⇐⇐⇐⇐⇐⇐5 ;5←4444←44←←←←←←←←←4 ;5←44⟸⟸44⟸4333333333 ;5⟸⟸4444⟸43          ; 55⟸⟸⟸⟸43           ;  555333            ",
    gun38: "  5⇐4443            ; 55←444⇐⇐           ;⇐54←444←44          ;5←44←4←44⇐44⇐5⇐555⇐ ;54←44←44←44←444←4←5 ;54←44←44←44←444←4←4 ;5⟸44←4←44⟸33⟸3⟸333⟸ ;⟸54←444←43          ; 55←444⟸⟸           ;  5⟸5333            ",






    shield1: "           ȡȡȡȡȡȡȡȡ           ;        ȡȡȡȢȢȢȢȢȢȢȢȡȡȡ        ;      ȡȡȢȢȢⱴⱴⱴⱴⱴⱴⱴⱴȢȢȢȡȡ      ;     ȡȡȢȢⱴⱴɁ⁊⁊⁊⁊⁊⁊⁊ⱴⱴȢȢȡȡ     ;    ȡȢȢⱴⱴɁ⁊⁊⸘⸘⸘⸘⸘⸘⸘⁊⁊ⱴⱴȢȢȡ    ;   ȡȢȢⱴɁɁ⁊⸘⸘‽‽‽‽‽‽‽⸘⸘⁊ɁⱴȢȢȡ   ;  ȡȡȢⱴɁɁ⁊⸘‽‽‽‽‽‽‽‽‽‽‽⸘⁊ɁⱴȢȡȡ  ;  ȡȢⱴɁɁ⁊⸘‽‽‽‽‽‽‽⇲⇲‽‽‽‽⸘⁊ɁⱴȢȡ  ; ȡȢȢⱴɁ⁊⸘‽‽‽‽‽‽‽⇲‽‽⇲⇲‽‽‽⸘⁊ⱴȢȢȡ ; ȡȢⱴɁ⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽⇲⇲‽‽⸘ɁⱴȢȡ ; ȡȢⱴ⁊⁊‽‽‽‽‽‽‽‽‽‽‽‽‽99⇲‽‽⸘⁊ⱴȢȡ ;ȡȢⱴɁ⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽9‽⇲‽‽⸘ɁⱴȢȡ;ȡȢⱴ⁊⁊‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⇲‽‽⸘ɁⱴȢȡ;ȡȢⱴ⁊⁊‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⇲‽⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⇲‽⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⇲‽‽⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⸘⁊ⱴȢȡ; ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⁊⁊Ȣȡ ; ȡȢⱴ⁊⁊⸘‽⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⸘ⱴȢȡ ; ȡȢȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⸘⁊⁊ȢȢȡ ;  ȡȢⱴɁ⁊⁊⸘‽‽‽‽‽‽‽‽‽‽‽‽‽⸘⁊⸘ⱴȢȡ  ;  ȡȡȢⱴɁ⁊⁊⸘⸘‽‽‽‽‽‽‽‽‽⸘⸘⁊⁊ⱴȢȡȡ  ;   ȡȢȢⱴɁ⁊⁊⸘‽‽‽‽‽‽‽‽⸘⸘⁊⁊ⱴȢȢȡ   ;    ȡȢȢⱴⱴɁ⁊⁊⸘⸘⸘⸘⸘⸘⸘⁊⁊ɁⱴȢȢȡ    ;     ȡȡȢȢⱴɁɁɁɁɁɁɁɁɁɁɁȢȢȡȡ     ;      ȡȡȢȢȢⱴɁɁɁɁɁɁɁȢȢȢȡȡ      ;        ȡȡȡȢȢȢȢȢȢȢȢȡȡȡ        ;           ȡȡȡȡȡȡȡȡ           ",
    shield2: "           ȡȡȡȡȡȡȡȡ           ;        ȡȡȡȢȢȢȢȢȢȢȢȡȡ⬄        ;      ȡȡȢȢȢⱴⱴⱴⱴⱴⱴⱴⱴȢ⬄Ȣȡȡ      ;     ⬄ȡȢȢⱴⱴɁ⁊⁊⁊⁊⁊⁊⬄⬄ⱴȢȢȡȡ     ;    ȡ⬄⬄ⱴⱴɁ⁊⁊⸘⸘⸘⸘⸘⬄⸘⁊⁊ⱴⱴȢȢȡ    ;   ȡȢȢ⬄ɁɁ⁊⸘⸘‽‽‽‽‽⬄‽⸘⸘⁊ɁⱴȢȢȡ   ;  ȡȡȢⱴɁ⬄⁊⸘‽‽‽‽‽   ‽‽‽⸘⁊ɁⱴȢȡȡ  ;  ȡȢⱴɁɁ⬄⸘‽‽‽‽‽‽ ⇲⇲‽‽‽‽⸘⁊ɁⱴȢȡ  ; ȡȢȢⱴɁ⁊⸘⬄‽‽‽‽‽ ⇲‽‽⇲⇲‽‽‽⸘⁊ⱴȢȢȡ ; ȡȢⱴɁ⁊⸘‽‽  ‽‽‽‽‽‽‽‽‽⇲⇲‽‽⸘ɁⱴȢȡ ; ȡȢⱴ⁊⁊‽‽ ‽‽‽‽‽‽‽‽‽‽99⇲‽‽⸘⁊ⱴȢȡ ;ȡȢⱴɁ⁊⸘‽‽‽ ‽‽‽ ‽‽‽‽‽‽9‽⇲‽‽⬄⬄⬄⬄⬄;ȡȢⱴ⁊⁊‽‽‽‽‽‽‽ ‽‽‽   ‽‽‽⇲‽⬄⬄ɁⱴȢȡ;⬄Ȣⱴ⁊⁊‽‽‽‽‽‽‽ ‽‽ ‽‽‽ ‽‽‽⇲‽⸘⁊ⱴȢȡ;ȡ⬄ⱴ⁊⁊‽‽‽‽    ‽‽‽‽‽ ‽‽‽‽⇲‽⸘⁊ⱴȢȡ;ȡȢ⬄⬄⁊⬄⬄⬄ ‽‽‽  ‽‽‽ ‽ ‽‽⇲‽‽⸘⁊ⱴȢȡ;ȡȢⱴ⁊⬄⬄‽‽‽‽‽‽‽‽ ‽‽‽‽ ‽‽‽‽⸘⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽‽‽‽ ‽‽‽‽ ‽‽‽‽⸘⸘⁊ⱴȢȡ;ȡȢⱴ⁊⁊⸘‽‽‽‽‽ ‽‽ ‽‽‽‽‽ ‽‽⸘⸘⸘⁊ⱴȢȡ; ȡȢⱴ⁊⁊⸘‽‽‽ ‽‽‽‽ ‽‽‽‽‽⬄⬄⸘⸘⁊⁊Ȣȡ ; ȡȢⱴ⁊⁊⸘‽⸘⬄‽‽‽‽‽ ‽‽‽‽‽‽‽⬄⬄⸘ⱴȢȡ ; ȡȢȢⱴ⁊⁊⸘‽⬄‽‽‽‽‽‽⬄‽‽‽‽‽⸘⸘⬄⬄ȢȢȡ ;  ȡȢⱴɁ⁊⬄⬄‽‽‽‽‽‽‽⬄‽‽‽‽‽⸘⁊⸘⬄⬄ȡ  ;  ȡȡȢⱴ⬄⬄⁊⸘⸘‽‽‽‽‽⬄‽‽‽⸘⸘⁊⁊ⱴȢ⬄⬄  ;   ȡ⬄⬄ⱴɁ⁊⁊⸘‽‽‽‽⬄‽‽‽⸘⸘⁊⁊ⱴȢȢ⬄   ;    ⬄ȢȢⱴⱴɁ⁊⁊⸘⸘⸘⬄⸘⸘⸘⁊⁊ɁⱴȢȢȡ    ;     ȡȡȢȢⱴɁɁɁɁɁ⬄ɁɁɁɁɁȢȢȡȡ     ;      ȡȡȢȢȢⱴɁɁɁ⬄ɁɁɁȢȢȢȡȡ      ;        ȡȡȡȢȢȢȢ⬄ȢȢȢȡȡȡ        ;           ȡȡȡȡ⬄ȡȡȡ           ",
    shield3: "           ȡȡȡ ȡȡȡȡ           ;        ȡȡȡȢȢȢ ȢȢȢȢȡȡ⬄        ;      ȡȡȢȢȢⱴⱴⱴ ⱴⱴⱴⱴȢ⬄Ȣȡ       ;     ⬄ȡȢȢⱴⱴɁ    ⁊⁊⬄⬄ⱴȢ ȡȡ     ;    ȡ⬄⬄      ⸘⸘⸘ ⬄⸘⁊⁊ⱴ ȢȢȡ    ;   ȡȢȢ⬄ Ɂ⁊⸘ ‽‽‽‽‽⬄‽⸘⸘⁊    ȡ   ;  ȡȡȢⱴ ⬄⁊⸘‽  ‽‽   ‽‽‽⸘ Ɂⱴ ȡȡ  ;    ⱴɁ ⬄⸘‽‽   ‽ ⇲⇲‽‽   ⁊Ɂ Ȣȡ  ; ȡȢȢ    ⬄‽‽ ‽‽ ⇲‽‽⇲⇲      ȢȢȡ ; ȡȢⱴ ⁊⸘‽‽   ‽‽ ‽‽‽  ⇲⇲ ‽⸘ɁⱴȢȡ ; ȡȢⱴ ⁊‽‽   ‽‽‽     99⇲ ‽⸘⁊ⱴȢȡ ;ȡȢⱴ ⁊⸘‽‽‽ ‽‽      ‽ 9 ⇲‽‽⬄⬄⬄⬄⬄;ȡȢⱴ⁊         ‽‽‽‽ ‽  ‽⇲‽⬄⬄ɁⱴȢȡ;⬄Ȣ       ‽‽ ‽‽‽‽‽ ‽  ‽‽⇲‽⸘⁊ⱴȢȡ;ȡ⬄ⱴ⁊ ‽‽  ‽‽‽ ‽‽‽  ‽‽‽ ‽⇲   ⱴ  ;ȡȢ⬄⬄ ⬄⬄⬄  ‽‽     ‽‽‽  ⇲     Ȣȡ;ȡȢⱴ ⬄⬄‽ ‽    ‽‽‽ ‽‽‽‽      ⱴȢȡ;ȡȢ ⁊⁊⸘ ‽‽   ‽‽‽‽  ‽‽‽   ⸘⸘⁊ Ȣȡ;ȡȢ ⁊⁊⸘  ‽‽‽ ‽‽‽‽‽ ‽‽‽ ‽⸘⸘⸘ ⱴȢȡ; ȡȢ ⁊ ⸘ ‽‽  ‽‽‽‽‽ ‽  ⬄⬄⸘⸘⁊ Ȣȡ ; ȡȢⱴ  ⸘‽ ⬄  ‽   ‽‽   ‽‽⬄⬄  Ȣȡ ; ȡȢ ⱴ ⁊⸘‽⬄‽  ‽‽‽⬄‽‽  ‽⸘⸘⬄⬄ȢȢȡ ;   ȢⱴɁ ⬄⬄‽‽  ‽‽‽⬄‽‽  ‽  ⸘⬄⬄ȡ  ;  ȡȡȢⱴ⬄⬄⁊⸘⸘ ‽‽‽‽⬄‽‽‽  ⁊⁊ⱴȢ⬄⬄  ;   ȡ⬄⬄ⱴɁ ⁊  ‽‽‽⬄‽‽‽⸘  ⁊ⱴȢȢ⬄   ;    ⬄ȢȢⱴⱴ ⁊⁊⸘⸘⸘⬄⸘⸘⸘⁊⁊ ⱴȢȢȡ    ;     ȡȡȢȢⱴ ɁɁɁɁ⬄ɁɁɁ  Ȣ ȡȡ     ;      ȡȡȢȢ    Ɂ⬄   ȢȢȢȡ       ;        ȡȡȡȢȢ  ⬄ȢȢȢȡȡȡ        ;           ȡȡȡȡ⬄ȡȡȡ           ",
    explosion1: "                         ;        ⟳⟳⟳⟳⟳⟳⟳⟳⟳        ;      ⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳      ;     ⟳⟳⟳⟳⟳⟳⟳⤾⟳⟳⟳⟳⟳⟳⟳     ;    ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳    ;   ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳   ;  ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤿⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳  ;  ⟳⟳⟳⤾⤾⤾⤾⤿⤿⤿⤿⤿⤿⤿⤾⤾⤾⤾⟳⟳⟳  ; ⟳⟳⟳⤾⤾⤾⤾⤿⤿⤿⤿⤿⤿⤿⤿⤿⤾⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿⤿⤿→⤿⤿⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿→→→→→⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿→→→→→⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⤾⤾⤾⤿⤿⤿→→→→→→→⤿⤿⤿⤾⤾⤾⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿→→→→→⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿→→→→→⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤿⤿⤿⤿⤿→⤿⤿⤿⤿⤿⤾⤾⤾⟳⟳⟳ ; ⟳⟳⟳⤾⤾⤾⤾⤿⤿⤿⤿⤿⤿⤿⤿⤿⤾⤾⤾⤾⟳⟳⟳ ;  ⟳⟳⟳⤾⤾⤾⤾⤿⤿⤿⤿⤿⤿⤿⤾⤾⤾⤾⟳⟳⟳  ;  ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤿⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳  ;   ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳   ;    ⟳⟳⟳⟳⤾⤾⤾⤾⤾⤾⤾⤾⤾⟳⟳⟳⟳    ;     ⟳⟳⟳⟳⟳⟳⟳⤾⟳⟳⟳⟳⟳⟳⟳     ;      ⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳⟳      ;        ⟳⟳⟳⟳⟳⟳⟳⟳⟳        ;                         ",

    enemy1: "      222      ;     2Q2Q2     ;     1Q2Q2     ;     11222     ;     44555     ;    444=455    ;    444444=    ;    34==+4+    ;    344444+    ;    334+444    ;     33344     ;     22222     ;     1Q2Q2     ;     1Q2Q2     ;      122      ",
    enemy2: "      222      ;     2Q2Q2     ;     1Q2Q2     ;    1112222    ;  221445552    ; 222444=4552   ; 222444444=2   ; 12234==+4+2   ; 122344444+2   ; 112334+4441   ;  112333441    ;    1222222    ;     1Q2Q2     ;     1Q2Q2     ;      122      ",
    enemy3: "       2       ;      Q2Q      ;     1Q2Q2     ;     11222     ;     2455      ;     44+45     ;    44+44+     ;    34+4=4     ;    34=44=     ;     34=44     ;     2334      ;     22222     ;     1Q2Q2     ;      Q2Q      ;       2       ",
    enemy4: "       2       ;      c2c      ;     1c2c2     ;     11222     ;     2455      ;     44a45     ;    44a44a     ;    34a4b4     ;    34b44b     ;     34b44     ;     2334      ;     22222     ;     1c2c2     ;      c2c      ;       2       ",
    enemy5: "      222      ;     2b2b2     ;     1b2b2     ;     11222     ;     44555     ;    444b455    ;    444444b    ;    34bba4a    ;    344444a    ;    334a444    ;     33344     ;     22222     ;     1b2b2     ;     1b2b2     ;      122      ",
    enemy6: "      222      ;     2c2c2     ;     1c2c2     ;    1112222    ;  221445552    ; 222444b4552   ; 222444444b2   ; 12234bba4a2   ; 122344444a2   ; 112334b4441   ;  112333441    ;    1222222    ;     1c2c2     ;     1c2c2     ;      122      ",
    enemy7: "      222      ;     2Q2Q2     ;   331Q2Q21=Q1=;  3  112221111Q;  32244455     ;  224++=455    ;  2244=444=    ;  2234==+4+    ;  2234=444+    ;  223==+444    ;  32233444     ;  3  22222     ;   331Q2Q21111Q;     1Q2Q21=Q1=;      122      ",
    enemy8: "      222      ;     2Q2Q21+=11;   331Q2Q21111=;  3  1122200011;  322444550    ; 2224++=4551   ; 2Q244=444=1   ; 222344=44+1   ; 2Q234=444+1   ; 2223==+4440   ;  322334440    ;  3  2222211111;   331Q2Q20011Q;     1Q2Q20=Q01;      122      ",
    enemy9: "      222           ;     2Q2Q2111       ;   331Q2Q21111      ;  3  1122200111     ;  322444550 0111    ; 2224++=4551 011    ; 2Q244=444=122012222; 222344=44+12==3===3; 2Q234=444+123===3==; 2223==+444022211222;  322334440  1110 11;  3  222221111100 21;   331Q2Q201100   22;     1Q2Q2000       ;      122           ",
    enemy10: "      3$#3     ;     1333344444;    1  22 4#$44;   1  555   1  ;   1344#55 1   ;   34$$$##5    ;   34$$$⇲#5    ;   3%$$$$$5    ;   33%$$$$4    ;   33%%$$$4    ;   1333%44 1   ;   1  333   1  ;    1  22 4#$44;     1333344444;      3$#3     ",
    enemy11: "      3$##3    ;      33333    ;       222     ;      44555    ;     444#445   ;    44$$###5   ;    44$$⇲##4   ;    4$$$$$$4   ;    34$$$$$4   ;    34%$$$$4   ;     333$444   ;      33334    ;       222     ;      33333    ;      3$##3    ",
    enemy12_0: "                     ;  22e22e22222e2e222  ; 123c33c33333c3c3321 ; 123c33c3333c33c3321 ; 123c33c333c333c3321 ;2333c333ddd333d333dce;23333c3333333d333d332;eccc33c333333c33d3332;2333c33dddd33c33c3dde;233c333c333d3c33c3c32;eccc333c333ccc33c33c2;233c333c333c3c33c3c32;2333c33cccc33c33c3cce;eccc33d333333c33c3332;23333d3333333c333d332;2333d333ddd333d333dce; 123c33c333c333d3321 ; 123c33c3333c33c3321 ; 123c33c33333c3c3321 ;  22e22e22222e2e222  ;                     ",
    enemy12_1: "  cceeee            ; c5d4d44e           ;c54c4c444e          ;c4c444cc4deeeeeeeee ;ed4c4444c444444444e ;ed4c4444c444444444e ;e5c444cc4dgggggggge ;e54c4c444g          ; e5d4d44g           ;  eeeeeg            ",
    enemy13: "             11111       ;   3344444  1     1      ;  34↑↑↑4422222   1112222 ; 34⇡4444↑↑⇡⇡⇡21111⇡⇡⇡↑↑↑2; 4⇡411⇡⇡212222   22222222; 44122221                ; 44 111     11   3333333 ; 4  11     1111 11↑↑⇡⇡⇡3 ;   33334  4444411222233  ;   333⇡4 433⇡3341        ;   3⇡3↑3433⇡33↑341       ;   3⇡3333333333↑41       ;   3↑333⇡↑3⇡↑33331       ;   2↑3333333333⇡31       ;   2↑3⇡2233↑33⇡331       ;   222↑2 233↑3331        ;   22222  2222211222233  ; 4  11     1111 11↑↑⇡⇡⇡3 ; 44 111     11   3333333 ; 44122222                ; 4⇡411⇡⇡212222   22222222; 34⇡4444↑↑⇡⇡⇡21111⇡⇡⇡↑↑↑2;  34↑↑↑4422222   1112222 ;   3344444  1     1      ;             11111       ",
    enemy14: "        4455555555       ;    ⤿⤿⤿⤿⤿⤿,'4444         ; ⤾⤾⤾⤾⟳⟳⟳⤾⤾44             ;   ⟳⟳⟳444555555555555555 ;   224,,,,,,'''''''''55  ;  2,'4444444422224444    ; 2222222222222222        ;      11    1            ;      11     111         ;      11        1        ;    22222222222222222    ;   ⤾333,'333,''33,'''33  ; ⤿⤾⤾⤿4444444444444444444 ;  ⤾⤾333,'333,''33,'''33  ;    22222222222222222    ;      11        1        ;      11     111         ;      11    1            ; 2222222222222222        ;  2,'2444444422224444    ;   224,,,,,,,''''''''55  ;   ⟳⟳⟳444555555555555555 ; ⤾⤾⤾⟳⟳⟳⟳⤾⤾44             ;    ⤿⤿⤿⤿⟳⤿,'4444         ;        4455555555       ",
    enemy15: "                     ;         3333        ;         3⇒⇒⇒3       ;         3→33→3      ;         3→222⇒3     ;         3→2  2⇒3    ;        44→55  2⇒3   ;       444→455  2⇒3  ;      4444→44⇒5 2→→3 ;      34⇒→→44→5 22333;      3444→→→45      ;      34⇒⇒→44⇒4 33332;      3344⇒44⇒4 3→→2 ;       334⇒444  3→2  ;        33⇒44  3→2   ;         2⇒3  3⇒2    ;         2⇒333⇒2     ;         2⇒33⇒2      ;         2⇒→⇒2       ;         2222        ;                     ",
    enemy16: " ‽‽‽‽ɁɁɁɁɁɁȡȡ  ;   ‽‽‽‽ɁɁɁɁȡ   ;     ‽‽‽‽ɁɁ    ;    ⸘Ɂ⁊⁊⁊⁊     ;   ‽ɁɁɁȡɁ⁊⁊    ; ⸘⸘ɁɁȡȡɁɁȡ⁊⁊   ;‽⸘⸘ⱴɁɁȢɁȢɁM⁊   ;‽⸘⸘ⱴɁȡȡȡȡɁɁ⁊   ;‽‽⸘ⱴɁɁȡɁȢɁM⁊   ; ‽⸘ⱴⱴȡȢɁɁȡɁɁ   ;   ⸘ⱴⱴɁȡɁɁɁ    ;    ⸘ⱴⱴⱴⱴɁ     ;     ‽‽‽‽ɁɁ    ;   ‽‽‽‽ɁɁɁɁȡ   ; ‽‽‽‽ɁɁɁɁɁɁȡȡ  ",
    enemy17: "                £    ;               ∞∞£   ;              ∞∞∞£¶  ;             §§∞∞¶   ;       £    §c¶¶¶    ;      ∞∞£ ∞§c¶       ;     §§∞∞∞∞c££       ;      §∞c∞∞∞c££      ;      ∞∞∞c∞∞∞c£      ;      ∞∞∞∞∞cc∞£      ;     §∞ccee∞∞e∞      ;      §∞∞∞∞ee∞∞      ;      §∞∞c∞∞∞e∞£     ;      §∞e∞∞∞e∞∞∞§    ;     §∞∞∞§∞e∞∞∞§     ;    §§∞∞§ ¶¶e§§      ;     §§§    ¶¶§§£    ;      §      ¶¶∞∞£   ;              ¶∞∞∞£  ;               ¶∞∞   ;                ¶    ",
    enemy18: "          3333                ;        222223333             ;      1122222222333           ;    11122222222222333         ;   1111111112222222233Ɂ       ;        44   44   ⸘⁊  ⁊ɁɁ     ;         44  433   ⸘⁊  ⁊⁊ɁɁ   ;          42222ȡȡȢ3 ⸘⁊   ⁊⁊Ɂ  ;         2ȡ222ȡ22Ȣ333⸘⁊⁊  ⁊Ɂ  ;        22ȡ22ȡ222Ȣ2233⸘⸘⁊  ⁊Ɂ ;        22ȡ2ȡ2222Ȣ2223  ⸘⁊ ⁊Ɂ ;       0222ȡ22ȡȡ22Ȣ2233 ⸘⁊  ⁊Ɂ;       0122ȡ2222ȡ22Ȣ223 ⸘⁊  ⁊Ɂ;       0122ȡ22ȡȡ2222Ȣ2Ȣ ⸘⁊  ⁊Ɂ;      ȡȡȡȡȡȡȡ2ȡ222222Ȣ3 ⸘⁊  ⁊Ɂ;      0012222ȡȡȡȡȡȡ22Ȣ2 ⸘⁊  ⁊Ɂ;      ȡȡȡȡȡȡȡ2ȡ222222Ȣ2 ⸘⁊  ⁊Ɂ;       0122ȡ22ȡȡ2222Ȣ2Ȣ ⸘⁊  ⁊Ɂ;       0012ȡ2222ȡ22Ȣ222 ⸘⁊  ⁊Ɂ;        012ȡ22ȡȡ22Ȣ222  ⸘⁊ ⁊Ɂ ;        00ȡ1ȡ2222Ȣ2222⸘⸘⁊  ⁊Ɂ ;         0ȡ01ȡ111Ȣ122⸘⁊⁊  ⁊Ɂ  ;          4000ȡ0ȡȢ0 ⸘⁊   ⁊⁊Ɂ  ;         44  40ȡ   ⸘⁊  ⁊⁊ɁɁ   ;        44   44   ⸘⁊  ⁊ɁɁ     ;   1122333333333333333Ɂ       ;    11122222222222233         ;      1112222222233           ;        111222222             ;          1111                ",
    enemy19: "                              ;         33#333344#44         ;        2333#3333%3444        ;        #%333###%333%#        ;        22%33333333%34        ;        22#33223333#34        ;        22#22011033#33        ;        22   03#0   33        ;        2  3333#444  3        ;          33#33%%344          ;         333#333%3344         ;        ###3#3333#%344        ;       333#3#33#333#344       ;       2%3%33#33##33#3$       ;       2%33%33#333#33$#       ;       2#23#33#333#33$#       ;       2#2#33#33##33%3$       ;       222#3#33%333#333       ;        %%#2#3333%#333        ;         222#333%%333         ;          22#23%3333          ;        3  2222#333  4        ;        33   02#0   44        ;        23#33011044#34        ;        23#33333333#34        ;        22%33333333%33        ;        #%233%####33%#        ;        2222%33333%333        ;         22#2223333%3         ;                              ",
    enemy20: "                              ;              22              ;            22222221111111111 ;          22222223333311⇒1→⇒1 ;        000011113⇒→→→→3111111 ;       0   11113⇒3222 33      ;       0  11 13⇒3      3      ;       0 11  3→31   3         ;       0    3→311  333        ;        0  33→3333 3⇒33       ;         03333→3333⇒33        ;       223333→3→33⇒3          ;      2233⇒3→33→3→333         ;      223⇒3→33→3→3333         ;      223333→3→33→3⇒3         ;      223333→3→333⇒⇒33        ;      223333→3→33→3→3         ;      223⇒3→33⇒3→3333         ;      2233⇒3→33⇒3→333         ;       223333→3→33→3          ;         03333→3333⇒33        ;        0  33→3333 3⇒33       ;       0    3⇒311  333        ;       0 11  3⇒31   3         ;       0  11 13⇒3      3      ;       0   11113→3222 33      ;        000011113→→→→→3111111 ;          22222223333311→1→⇒1 ;            22222221111111111 ;              22              ",
    enemy21: "                              ;              22              ;    1111111122222221111111111 ;  111111112⇑↑2⇑↑23333311↑1↑⇑1 ;    0   000011113↑↑↑↑↑3111111 ;   0   0   11113⇑3222 33      ;   0   0  11 13⇑3      3      ;   0   0 11  3⇑31   3         ;   0   0    3↑311  333        ;    0   0  33↑3333 3⇑33       ;     0   03333↑3333⇑33        ;      0223333↑3↑33↑3          ;      2233⇑3↑33↑3↑333         ;      2⇑3⇑3↑33↑3↑3333         ;      2⇑3333↑3↑33↑3⇑3         ;      223333↑3↑⇑⇑⇑⇑↑33        ;      2⇑3333↑3↑33↑3↑3         ;      2⇑3↑3⇑33⇑3↑3333         ;      2233⇑3↑33⇑3↑333         ;      0223333⇑3↑33⇑3          ;     0   03333↑3333⇑33        ;    0   0  33↑3333 3⇑33       ;   0   0    3↑311  333        ;   0   0 11  3↑31   3         ;   0   0  11 13⇑3      3      ;   0   0   11113⇑3222 33      ;    0   000011113⇑↑↑↑↑3111111 ;  111111112↑⇑2↑⇑23333311⇑1⇑↑1 ;    1111111122222221111111111 ;              22              ",

    b1: "          ; ++++++++ ;+⇲⇲⇲⇲⇲⇲⇲⇲+; ++++++++ ;          ",
    b2: "          ; aaaaaaaa ;a⇲⇲⇲⇲⇲⇲⇲⇲a; aaaaaaaa ;          ",
    b3: "          ; ++++++++ ;    =+⇲⇲⇲+;   ====== ;          ",
    b4: "          ; aaaaaaaa ;    ba⇲⇲⇲a;   bbbbbb ;          ",
    b5: "     +++  ;  ++=++⇲+ ;====+=+⇲⇲+;    =+=⇲+ ;   ===++  ",
    b6: "     aaa  ;  aabaa⇲a ;bbbbaba⇲⇲a;    bab⇲a ;   bbbaa  ",
    b7: " aaaaaaaa ;   bbaa⇲⇲a;bbbbbbaa⇲a;    bbbbb ",
    b8: " ++++++++ ;   ==++⇲⇲+;======++⇲+;    ===== ",
    b9: "       ba ;bbbbbbb⇲⇲a;  +++==9⇲+;       =+ ",
    b10: "          ; aaaaaaaa ;   OOO⇲⇲⇲+;  +++++++ ;          ",
    b11: "          ; aaaaa+++ ;a⇲⇲⇲⇲⇲⇲⇲⇲+; aaa+++++ ;          ",
    b12: " 000     I;0⇲⇔⇲0   I⟺;⟺II0ƌ0II⇲0;I   0ƌ⇲⇔0 ;     000  ",
    b13: "          ; ƌƌƌƌƌƌƌƌ ;⇔⇲⇲⇲⇲⇲⇲⇲⇲ƌ; ⇔⇔⇔⇔⇔ƌƌƌ ;          ",
    b14: " ↻⤿⤾ ;⤿⤿↻⤿⤾;⟳⤾⤿⤾⤿;↻↻⤾↻⟳; ⟳⤿⟳ ",
    b15: "          ; ↓↓↓↓↓↓↓↓ ;↓⇲⇲⇲⇲⇲⇲⇲⇲↓; ↓↓↓↓↓↓↓↓ ;          ",
    b16: "      ¡¡→ ;    →→#⇲#→;  ¡¡¡$##⇲¡;→→→→→→$⇲¡→;      →→→ ",
    b17: "##;##",
    b18: "          ;↓↓↓↓↓↓↓↓↓ ;   ⇓=++⇲⇲↓; ⇓⇓⇓⇓⇓⇓⇓↓ ;          ",
    b20: "44      44444444    ;334 444444b44b44444 ;3344433b33c43c34b444;333333c33c33c33c3342;332222b22b33b33b3322;322 222222222222222 ;22      22222222    ",
    b19: "  a  ; a b ; a b ; a b ;  b  ",
    b21: "  ←←←← ;   ⇲⇲⇲←;kkkkkk ",

    cursor1: "⇲⇲⇲          ;⇲0099        ;⇲000088      ; 90⇲00077    ; 9009000066  ;  80080000044;  80000000004;   700033333 ;   70003     ;    6003  88 ;    6003 8007;     403 8007;     44   77 ",
    cursorp: "+++          ;+00==        ;+0000==      ; =0=000QQ    ; =00Q0000QQ  ;  =00W00000WW;  =000000000W;   Q000EEEEE ;   Q000E     ;    Q00E  == ;    Q00E =00Q;     W0E =00Q;     WW   QQ ",
    cursorn: "aaa          ;a00bb        ;a0000cc      ; b0c000dd    ; b00d0000dd  ;  c00e00000ee;  c000000000e;   d000fffff ;   d000f     ;    d00f  cc ;    d00f c00d;     e0f c00d;     ee   dd ",
    cursor2: "   =QWEWQ=   ;  +   W   +  ; +  Q Q Q  + ;=  =  =  =  =;Q Q   +   Q Q;W           W;EWQ=+   +=QWE;W           W;Q Q   +   Q Q;=  =  =  =  =; +  Q Q Q  + ;  +   W   +  ;   =QWEWQ=   ",
    cursor3: "   abcdcba   ;  a   c   a  ; a    b    a ;a     a     a;b           b;c     a     c;dcba a a abcd;c     a     c;b           b;a     a     a; a    b    a ;  a   c   a  ;   abcdcba   ",

    ground11: "3355444333444445533555553;3344454433444453333355533;3444555444ccccc3444345445;444445ccccaaaaacccc443455;4433ccaaaaaaaaaaaaacc3555;44ccaaaaaaaaaaaaaaaaacc45;4caaaaaaaaaaaaaaaaaaaaac4;56ccaaaaaaaaaaaaaaaaacc63;3667ccaaaaaaaaaaaaaccab64;3667abccccaaaaacccc76ab63;3667ab7888cccccab7776ab63;3667ab788888887ab7776ab63;3667ab788888887ab776ab663;4667ab788888887ab776ab664;46677ab788888887ab76ab664;466677ab78888887ab76ab663;4666777ab78888887ab6ab663;3466666ab78888877ab6ab643;3446666cb77888877ac6cc434;4444544cc77788877c3344444;4444554344477733344444444;4445545334353333335444444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground
    ground2: "3355444333444445533555553;3344454433444455443355533;34+++55444454453444345445;44+QQ+4444554+33344443455;44+Q+W+55444+++3443433555;445+WE++554+E+E+433333345;455+QW+W+5+EQE+Q+34553444;5554+QEW+++EQQ+EQ+554++++;3544+Q++W+E++E+Q++54++EQ+;3++++E+E++EEE+++E+4+E+QE+;3++EE+EQQ+EQEQ+EE++EE++++;3+E+QE+E+QEQEE+QE+QQ+QE+3;3+QQ+EQ+Q+QEQQ+QQ+Q+EQ+43;44+EE+EQ+QQQQE+QQ++QQ+544;444+EQ+QQ+QEQE+QE+QE+5554;+++E+EE+QQ+EEE+EQ+EQ++++3;+QEQ++EQ+QQ+QQ+EQ+Q+EQQ+3;+EQQQ++EE+EE+E+QQ++E++E+3;3+EQQE++QE+QE++EQ+E+QE+34;42++EQ+E+QQ+QQ+EQ++E++224;4222++++++EE+QE+E+++22244;4442222222322222222224444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground3: "3355444333444445533555553;3344454433444453333355533;3444555444QQQQQ3444345445;444445QQQQ+++++QQQQ443455;4433QQ+++++++++++++QQ3555;44QQ+++++++++++++++++QQ45;4Q+++++++++++++++++++++Q4;56QQ+++++++++++++++++QQ63;3667QQ+++++++++++++QQ+=64;3667+=QQQQ+++++QQQQ76+=63;3667+=7888QQQQQ+=7776+=63;3667+=788888887+=7776+=63;3667+=788888887+=776+=663;4667+=788888887+=776+=664;46677+=788888887+=76+=664;466677+=78888887+=76+=663;4666777+=78888887+=6+=663;3466666+=78888877+=6+=643;3446666W=77888877+W6WW434;4444544WW77788877W3344444;4444554344477733344444444;4445545334353333335444444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground4: "3355444333444445533555553;3344454433444455443355533;34aaa55444454453444345445;44acca4444554a33344443455;44adada55444aaa3443433555;445accaa554adada433333345;455adcaca5adcdada34553444;5554acccaaacccacca554aaaa;3544adaacacaadacaa54aadca;3aaaadadaacddaaada4adacca;3aaccadccaccddacdaaddaaaa;3acaccacaddccdaccaddacca3;3addacdadadcdcadcadacca43;44acdadcaccdccadcaadda544;444adcaddacddcaccaaca5554;aaadacdadcaddcacdaccaaaa3;acdcaadcaddadcaddacaccda3;adcdcaacdacdadacdacdaada3;3adcddaaccaddaaccacacca34;42aaddadaddacdadcacdaa224;4222aaaaaacdaddacaaa22244;4442222222322222222224444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground5: "3355444333444445533555553;3344454433caaac5443355533;344455544caa⇲aac444345445;444445444ca⇲⇲⇲ac344443455;443344455caa⇲aac443433555;4453344555ca⇲ac4433333345;4555345555ca⇲ac4334553444;5554555545ca⇲ac4345544444;3544455444ca⇲ac4445444444;3444444444ca⇲ac4444444443;3344455444ca⇲ac5433444333;3344555543ca⇲ac4443344433;3444455553ca⇲ac4445345443;4444355455ca⇲ac3455555544;4443334444ca⇲ac3555545554;4433344433ca⇲ac3355444533;4443334444ca⇲ac3344444433;3444544443ca⇲ac3444444333;3444454434ca⇲ac3443344434;4444544344ca⇲ac3433444444;444455434caa⇲aac344444444;444554533ca⇲⇲⇲ac335444444;344544433caa⇲aac355544443;3344444435caaac4335554433;3334444344554444444544333",
    trackS: "3355444333444445533555553;3344454433444455443355533;3444555444454453444345445;4444454444554433344443455;4433444554444333443433555;4453344555445434433333345;4555345555455544334553444;5554555545555544345544444;1111111111111111111111111;2222222222222222222222222;2332222333222223333222222;2222222222222222222222232;2222333222333322223322222;2222222222222222222222222;3322233222222222223332223;2222222222223322222222222;1111111111111111111111111;3444544443445544444444333;3444454434355444443344434;4444544344443444433444444;4444554344433344344444444;4445545334353333335444444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    trackT: "3355444333444445533555553;3344454433444455443355533;3444555444454453444345445;4444454444554433344443455;4433444554444333443433555;4453344555445434433333345;4555345555455544334553444;5554555545555544345544444;1111111111155444445444444;2222222222211454444444443;2222222332222155433444333;3332222222223214443344433;2222322322222324445345443;2222322222222223455555544;3222332222322221555545554;2222222222222221355444533;1111112222222221344444433;3444511122222321444444333;3444454123222321443344434;4444544123222221433444444;4444554122222221344444444;4445545122232221335444444;3445444123232221355544443;3344441123232231135554433;3334444122222222144544333",
    trackCr
    trackTh: "3355444512222222133555553;3344454513222222143355533;3444555513232222144345445;4444454512232222144443455;4443444512232232143433555;4444344513232232133333345;4454435513232222134553444;3454533513222222145544444;5355533512222222111111111;5355443513322322222222222;4354444413232222233333322;4454553412222233222222222;5455433412222222232222333;4453533413222232233322222;4534533412232232322223332;5344453412222232222222222;3444443412222222111111111;3344433412222232144443333;4344343413232232143344434;4545444313232232133444444;4544554312232222144444444;4445545312232222135444444;3445444312222322155544443;3344445313222322135554433;3334444313222322144544333",
    ground6: "3355444333444445533555553;3344454433Q+++Q5443355533;344455544Q++⇲++Q444345445;444445444Q+⇲⇲⇲+Q344443455;443344455Q++⇲++Q443433555;4453344555Q+⇲+Q4433333345;4555345555Q+⇲+Q4334553444;5554555545Q+⇲+Q4345544444;3544455444Q+⇲+Q4445444444;3444444444Q+⇲+Q4444444443;3344455444Q+⇲+Q5433444333;3344555543Q+⇲+Q4443344433;3444455553Q+⇲+Q4445345443;4444355455Q+⇲+Q3455555544;4443334444Q+⇲+Q3555545554;4433344433Q+⇲+Q3355444533;4443334444Q+⇲+Q3344444433;3444544443Q+⇲+Q3444444333;3444454434Q+⇲+Q3443344434;4444544344Q+⇲+Q3433444444;444455434Q++⇲++Q344444444;444554533Q+⇲⇲⇲+Q335444444;344544433Q++⇲++Q355544443;3344444435Q+++Q4335554433;3334444344554444444544333",
    ground7: "3355444333444445533555553;33444544344++Q55443355533;3444555444++⇲+Q4444345445;4444454444+⇲⇲⇲Q3344443455;4433444554Q+⇲⇲+Q443433555;44533445554QQ+⇲+Q33333345;4555345555455Q+⇲+Q4553444;55545555455555Q+⇲+Q544444;354445544445544Q+⇲+Q44444;3444444444444454Q+⇲+Q4443;33444554443445554Q+⇲+QQ33;334455554344555444Q+⇲⇲+Q3;3444455553444444445Q⇲⇲⇲+3;4444355455554553455Q+⇲++4;44433344444555335553Q++54;4433344433445333355444533;4443334444444534344444433;3444544443445544444444333;3444454434355444443344434;4444544344443444433444444;4444554344433344344444444;4445545334353333335444444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground8: "3355444333444445533555553;33444544344aac55443355533;3444555444aa⇲ac4444345445;4444454444a⇲⇲⇲c3344443455;4433444554ca⇲⇲ac443433555;44533445554cca⇲ac33333345;4555345555455ca⇲ac4553444;55545555455555ca⇲ac544444;354445544445544ca⇲ac44444;3444444444444454ca⇲ac4443;33444554443445554ca⇲acc33;334455554344555444ca⇲⇲ac3;3444455553444444445c⇲⇲⇲a3;4444355455554553455ca⇲aa4;44433344444555335553caa54;4433344433445333355444533;4443334444444534344444433;3444544443445544444444333;3444454434355444443344434;4444544344443444433444444;4444554344433344344444444;4445545334353333335444444;3445444333555343355544443;3344444435555444335554433;3334444344554444444544333",
    ground9: "4444444444444444444444443;4355555555555=W5555555543;433555555555=W55555555345;433355555555=W55555553345;43333555555=W555555533345;43333355555=W555555333345;4333334444Q+4444443333344;4333334444Q+4444443333344;4333334444Q+4444443333344;4333334444Q+4444443333343;4333334444Q+4444443333343;43333344444Q+444443333343;433333444444Q+44443333343;433333444444Q+44443333344;433333444444Q+44443333344;433333444444Q+44443333343;433333444444Q+44443333343;433333444444Q+44443333343;43333555555W=555553333344;43335555555W=555555333344;4335555555W=5555555533344;4355555555W=5555555553344;455555555W=55555555555343;4444444444444444444444443;33344443445544444445443 3",
    ground10: "4444444444444444444444443;4355555555555bd5555555543;433555555555bd55555555345;433355555555bd55555553345;43333555555bd555555533345;43333355555bd555555333345;4333334444ca4444443333344;4333334444ca4444443333344;4333334444ca4444443333344;4333334444ca4444443333343;4333334444ca4444443333343;43333344444ca444443333343;433333444444ca44443333343;433333444444ca44443333344;433333444444ca44443333344;433333444444ca44443333343;433333444444ca44443333343;433333444444ca44443333343;43333555555db555553333344;43335555555db555555333344;4335555555db5555555533344;4355555555db5555555553344;455555555db55555555555343;4444444444444444444444443;33344443445544444445443 3",

    button1: "555555555555555;3===5555555===5;3+44444444455+5;3+44444444445+5;334====44444455;33==++==4444455;3==++++=======5;3=+++++++++++=5;3==++++=======5;33==++==4444455;334====44444455;3=34444444444=5;3+33444444444+5;3+==3333333==+5;333333333333333",
    button2: "555555555555555;3===5555555===5;3+44444444455+5;3+44==444==45+5;3344=+444=+4455;3344=+444=+4455;3344=+444=+4455;3344=+444=+4455;3344=+444=+4455;3344=+444=+4455;3344=+444=+4455;3=34=+444=+44=5;3+33444444444+5;3+==3333333==+5;333333333333333",
    button3: "555555555555555;3===5555555===5;3+44444444455+5;3+4=444=44445+5;334+=44+=444455;3344+=44+=44455;33444+=44+=4455;334444+=44+=455;33444=+44=+4455;3344=+44=+44455;334=+44=+444455;3=3+444+44444=5;3+33444444444+5;3+==3333333==+5;333333333333333",
    bbar: "                                                            ;                                                            ;                                                            ;                 4444444444444444444444444555               ;               44411111111111111111111111111555             ;344444444444444444111111111111111111111111114455555555555555;311111411111111444111111111111111111114444444441114111411155;311111411111111444111111111111111111114111114441114111411145;333333333333444444111111111111111111114111114441114111411144;333333333333333333334444444444444444444444444444444444444444",
    upg: "     +++++     ;   ++WWWWW++   ;  +WW  +  WW+  ; +W   +++   W+ ; +   ++W++  W+ ;+W  ++W W++  W+;+  ++W   W++  +;+ +++++ +++++ +;+ WWWW+ +WWWW +;+     + +     +;W+    + +    +W; +    + +    + ; W+   +++   +W ;  W++ WWW ++W  ;   WW+++++WW   ;     WWWWW     ",
    sll: "     +++++     ;   ++WWWWW++   ;  +WW  +  WW+  ; +W   +++   W+ ; +   +W+W+  W+ ;+W   + + +   W+;+    + + W    +;+    W+++     +;+     W+W+    +;+      + +    +;W+   + + +   +W; +   W+++W   + ; W+   W+W   +W ;  W++  W  ++W  ;   WW+++++WW   ;     WWWWW     ",
    trg: "     +++++     ;   ++WWWWW++   ;  +WW     WW+  ; +W++++ ++++W+ ; + +===+===+W+ ;+W +===+===+ W+;+  +===+===+  +;+  W+==+==+W  +;+   +==+==+   +;+   W+=+=+W   +;W+   +=+=+   +W; +   W+++W   + ; W+   W+W   +W ;  W++  W  ++W  ;   WW+++++WW   ;     WWWWW     ",





    title: "                                                   ;  +++↓ +++↓   +++↓  +++++↓+++++↓+++↓    +++↓ +↓  +↓; +↓  +↓+↓ +↓  +↓ +↓   +↓    +↓  +↓ +↓  +↓  +↓++↓ +↓; +↓  +↓+↓ +↓  +↓ +↓   +↓    +↓  +↓ +↓  +↓  +↓++↓ +↓; +↓  +↓+↓ +↓  +↓ +↓   +↓    +↓  +↓ +↓  +↓  +↓+↓+↓+↓; +↓  +↓+++↓   +++++↓  +↓    +↓  +++↓   +↓  +↓+↓+↓+↓; +↓  +↓+↓ +↓  +↓  +↓  +↓    +↓  +↓ +↓  +↓  +↓+↓ ++↓; +↓  +↓+↓  +↓ +↓  +↓  +↓    +↓  +↓  +↓ +↓  +↓+↓ ++↓;  +++↓ +↓   +↓+++++↓+++++↓  +↓  +↓   +↓ +++↓ +↓  +↓;                                                   ; +++↓         +++++++↓+++++++↓+++++++↓         +++↓;    +++↓         +↓      +↓      +↓         +++↓   ;       +++↓      +↓      +↓      +↓      +++↓      ;          +++↓   +↓      +↓      +↓   +++↓         ;       +++↓      +↓      +↓      +↓      +++↓      ;    +++↓         +↓      +↓      +↓         +++↓   ; +++↓            +↓      +↓      +↓            +++↓;              +++++++↓+++++++↓+++++++↓             ;                                                   ; +↓  +++↓+++↓+++↓   ++↓ +++↓+++↓+++↓+↓  +↓+++↓+++↓ ; +↓  +↓+↓+↓   +↓    +↓+↓+↓  +↓  +↓  ++↓ +↓+↓  +↓   ; +↓  +++↓+++↓ +↓    +↓+↓++↓ ++↓ ++↓ +↓+↓+↓+++↓++↓  ; +↓  +↓+↓  +↓ +↓    +↓+↓+↓  +↓  +↓  +↓ ++↓  +↓+↓   ; +++↓+↓+↓+++↓ +↓    ++↓ +++↓+↓  +++↓+↓  +↓+++↓+++↓ ;                                                   ",

};

var letters = {
    A: " 0000000 ;0       0;0       0;0       0;000000000;0       0;0       0;0       0;0       0",
    B: " 000000  ;0      0 ;0      0 ;0      0 ;00000000 ;0       0;0       0;0       0;00000000 ",
    C: " 00000000;0        ;0        ;0        ;0        ;0        ;0        ;0        ; 00000000",
    D: "00000000 ;0       0;0       0;0       0;0       0;0       0;0       0;0       0;00000000 ",
    E: "000000000;0        ;0        ;0        ;00000000 ;0        ;0        ;0        ;000000000",
    F: "000000000;0        ;0        ;0        ;00000000 ;0        ;0        ;0        ;0        ",
    G: " 0000000 ;0       0;0        ;0        ;0     000;0       0;0       0;0       0; 0000000 ",
    H: "0       0;0       0;0       0;0       0;000000000;0       0;0       0;0       0;0       0",
    I: " 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ",
    J: "        0;        0;        0;        0;        0;        0;0       0;0       0; 0000000 ",
    K: "0       0;0      0 ;0     0  ;0    0   ;00000    ;0    0   ;0     0  ;0      0 ;0       0",
    L: "0        ;0        ;0        ;0        ;0        ;0        ;0        ;0        ;000000000",
    M: "0       0;00     00;0 0   0 0;0  0 0  0;0   0   0;0       0;0       0;0       0;0       0",
    N: "0       0;00      0;0 0     0;0  0    0;0   0   0;0    0  0;0     0 0;0      00;0       0",
    O: " 0000000 ;0       0;0       0;0       0;0       0;0       0;0       0;0       0; 0000000 ",
    P: " 0000000 ;0       0;0       0;0       0;00000000 ;0        ;0        ;0        ;0        ",
    Q: " 000000  ;0      0 ;0      0 ;0      0 ;0      0 ;0      0 ;0      0 ;0      0 ; 00000000",
    R: "00000000 ;0       0;0       0;0       0;00000000 ;0    0   ;0     0  ;0      0 ;0       0",
    S: " 0000000 ;0       0;0        ;0        ; 0000000 ;        0;        0;0       0; 0000000 ",
    T: "000000000;    0    ;    0    ;    0    ;    0    ;    0    ;    0    ;    0    ;    0    ",
    U: "0       0;0       0;0       0;0       0;0       0;0       0;0       0;0       0; 0000000 ",
    V: "0       0;0       0; 0     0 ; 0     0 ;  0   0  ;  0   0  ;   0 0   ;   0 0   ;    0    ",
    W: "0   0   0;0   0   0;0   0   0; 0 0 0 0 ; 0 0 0 0 ; 0 0 0 0 ;  0   0  ;  0   0  ;  0   0  ",
    X: "0       0; 0     0 ;  0   0  ;   0 0   ;    0    ;   0 0   ;  0   0  ; 0     0 ;0       0",
    Y: "0       0; 0     0 ;  0   0  ;   0 0   ;    0    ;    0    ;    0    ;    0    ;    0    ",
    Z: "000000000;       0 ;      0  ;     0   ;    0    ;   0     ;  0      ; 0       ;000000000",
    a: "       ;       ;000000 ;      0;0000000;0     0;0     0;0     0; 000000",
    b: "0      ;0      ;0      ;000000 ;0     0;0     0;0     0;0     0;000000 ",
    c: "       ;       ;       ; 000000;0      ;0      ;0      ;0      ; 000000",
    d: "      0;      0;      0; 000000;0     0;0     0;0     0;0     0; 000000",
    e: "       ;       ;       ; 00000 ;0     0;0000000;0      ;0      ; 000000",
    f: " 000;0   ;0   ;0000;0   ;0   ;0   ;0   ;0   ",
    g: "       ;       ; 00000 ;0     0;0     0;0     0;0     0; 000000;      0;      0; 00000 ",
    h: "0      ;0      ;0      ;000000 ;0     0;0     0;0     0;0     0;0     0",
    i: " 0 ;   ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ",
    j: "      0;       ;      0;      0;      0;      0;      0;      0;      0;      0;000000 ",
    k: "0      ;0      ;0     0;0    0 ;0   0  ;0000   ;0   0  ;0    0 ;0     0",
    l: "0  ;0  ;0  ;0  ;0  ;0  ;0  ;0  ; 00",
    m: "       ;       ;       ;000000 ;0  0  0;0  0  0;0  0  0;0  0  0;0  0  0",
    n: "       ;       ;       ;000000 ;0     0;0     0;0     0;0     0;0     0",
    o: "       ;       ;       ; 00000 ;0     0;0     0;0     0;0     0; 00000 ",
    p: "       ;       ;       ;000000 ;0     0;0     0;0     0;0     0;000000 ;0      ;0      ",
    q: "       ;       ;       ; 000000;0     0;0     0;0     0;0     0; 000000;      0;      0",
    r: "       ;       ;       ; 000000;0      ;0      ;0      ;0      ;0      ",
    s: "       ;       ; 00000 ;0     0;0      ; 00000 ;      0;0     0; 00000 ",
    t: "0    ;0    ;00000;0    ;0    ;0    ;0    ;0    ; 0000",
    u: "       ;       ;       ;0     0;0     0;0     0;0     0;0     0; 00000 ",
    v: "       ;       ;       ;0     0; 0   0 ; 0   0 ;  0 0  ;  0 0  ;   0   ",
    w: "         ;         ;         ;0   0   0;0   0   0; 0 0 0 0 ; 0 0 0 0 ;  0   0  ;  0   0  ",
    x: "       ;       ;0     0; 0   0 ;  0 0  ;   0   ;  0 0  ; 0   0 ;0     0",
    y: "       ;       ;       ;0     0;0     0;0     0;0     0;0     0; 000000;      0; 000000",
    z: "       ;       ;       ;0000000;      0;    00 ; 000   ;0      ;0000000",
    "1-": "  0; 00;0 0;  0;  0;  0;  0;  0;  0",
    "2-": " 0000000 ;0       0;        0;        0; 0000000 ;0        ;0        ;0        ;000000000",
    "3-": " 000000  ;0      0 ;       0 ;       0 ; 0000000 ;        0;        0;0       0; 00000000",
    "4-": "     00 ;    0 0 ;   0  0 ;  0   0 ; 0    0 ;00000000;      0 ;      0 ;      0 ",
    "5-": "000000000;0        ;0        ;0        ;00000000 ;        0;        0;0       0; 0000000 ",
    "6-": " 0000000 ;0        ;0        ;0        ;00000000 ;0       0;0       0;0       0; 0000000 ",
    "7-": "00000000 ;        0;        0;        0;        0;        0;        0;        0;        0",
    "8-": " 0000000 ;0       0;0       0;0       0; 0000000 ;0       0;0       0;0       0; 0000000 ",
    "9-": " 0000000 ;0       0;0       0;0       0; 00000000;        0;        0;        0; 0000000 ",
    "0-": " 0000000 ;0      00;0     0 0;0    0  0;0   0   0;0  0    0;0 0     0;00      0; 0000000 ",
    "!": " 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ;   ; 0 ",
    "@": " 0000000 ;0       0;0  000  0;0 0   0 0;0 0   0 0;0 0   0 0;0  000 00;0        ; 0000000 ",
    "#": "   0   0 ;   0   0 ; 00000000;  0   0  ;  0   0  ;  0   0  ;00000000 ; 0   0   ; 0   0   ",
    "$": "    0    ; 0000000 ;0   0   0;0   0    ; 0000000 ;    0   0;0   0   0; 0000000 ;    0    ",
    "%": " 00     0;0  0   0 ;0  0  0  ; 00  0   ;    0    ;   0  00 ;  0  0  0; 0   0  0;0     00 ",
    "^": "    0    ;   0 0   ;  0   0  ; 0     0 ;0       0;         ;         ;         ;         ",
    "&": "  00000  ; 0     0 ;  0   0  ;   0 0   ;    0    ;   0 0   ;  0   0 0; 0     0 ;  00000 0",
    "*": "         ; 0  0  0 ;  0 0 0  ;   000   ; 0000000 ;   000   ;  0 0 0  ; 0  0  0 ;         ",
    "(": "    00;  00  ; 0    ; 0    ;0     ; 0    ; 0    ;  00  ;    00",
    ")": "00    ;  00  ;    0 ;    0 ;     0;    0 ;    0 ;  00  ;00    ",
    "]": "0000;   0;   0;   0;   0;   0;   0;   0;0000",
    "[": "0000;0   ;0   ;0   ;0   ;0   ;0   ;0   ;0000",
    "-": "         ;         ;         ;         ;000000000;         ;         ;         ;         ",
    "+": "    0    ;    0    ;    0    ;    0    ;000000000;    0    ;    0    ;    0    ;    0    ",
    "_": "         ;         ;         ;         ;         ;         ;         ;         ;000000000",
    "=": "         ;         ;000000000;         ;         ;         ;000000000;         ;         ",
    "~": "         ;         ;         ;  00    0; 0  0  0 ;0    00  ;         ;         ;         ",
    "`": "         ;   0     ;    0    ;     0   ;         ;         ;         ;         ;         ",
    "{": "      000;     0   ;     0   ;    00   ;   0     ;    00   ;     0   ;     0   ;      000",
    "}": "000      ;   0     ;   0     ;   00    ;     0   ;   00    ;   0     ;   0     ;000      ",
    "|": " 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ; 0 ",
    "\\": "0    ;0    ; 0   ; 0   ;  0  ;  0  ;   0 ;   0 ;    0;    0",
    "/": "    0;    0;   0 ;   0 ;  0  ;  0  ; 0   ; 0   ;0    ;0    ",
    ":": "     ;     ;  0  ;     ;     ;     ;  0  ;     ;     ",
    ";": "     ;     ;  0  ;     ;     ;     ;  0  ;  0  ; 0   ",
    "'": "  0  ;  0  ;  0  ;     ;     ;     ;     ;     ;     ",
    '"': " 0 0 ; 0 0 ; 0 0 ;     ;     ;     ;     ;     ;     ",
    "≤": "       00;     00  ;   00    ; 00      ;0        ; 00      ;   00    ;     00  ;       00",
    ">": "00       ;  00     ;    00   ;      00 ;        0;      00 ;    00   ;  00     ;00       ",
    ".": "   ;   ;   ;   ;   ;   ;   ;   ; 0 ",
    ",": "   ;   ;   ;   ;   ;   ; 0 ; 0 ;0  ",
    "?": " 000 ;0   0;0   0;   0 ;   0 ;  0  ;  0  ;     ;  0  ",
    " ": "         ;         ;         ;         ;         ;         ;         ;         ;         ",
}
var fillColors = ["0", "⇲", "+", "a", "m"];



var sprites = {};
var txt = {};

function openLive() {
    if (window.innerWidth <= 700) {
        var a = window.open("", "");
        a.document.open();
        a.document.write("<!DOCTYPE html>" + document.documentElement.outerHTML.replaceAll("KAInfiniteLoopProtect();", ""));
        a.document.close();
    }
}

document.body.onload = function() {
    document.querySelector("#loader").style.display = "none";
};

function renderSprite(w, s) {
    var v = w.split(';')
    var img = createGraphics(v[1].length * s, v.length * s);
    if (img) {
        img.background(0, 0, 0, 0);
        img.noStroke();
        img.smooth();
        for (var i = 0; i < v[1].length; i++) {
            for (var j = 0; j < v.length; j++) {
                img.fill(palette[v[j][i]])
                img.rect(i * s, j * s, s, s);
            }
        }
    }
    return img;
}

function customSprite(w, s, r, val) {
    var vv = w;
    if (r && val) {
        vv = vv.replaceAll(r, val)
    }
    var v = vv.split(';')
    var img = createGraphics(v[1].length * s, v.length * s);
    if (img) {
        img.background(0, 0, 0, 0);
        img.noStroke();
        img.smooth();
        for (var i = 0; i < v[1].length; i++) {
            for (var j = 0; j < v.length; j++) {
                img.fill(palette[v[j][i]])
                img.rect(i * s, j * s, s, s);
            }
        }
    }
    return img;
}

function loadSprites() {
    var ks = Object.keys(art);
    var kv = Object.values(art);
    for (var i = 0; i < ks.length; i++) {
        sprites[ks[i]] = renderSprite(kv[i], 2);
    }
}

function loadText() {
    var ks = Object.keys(letters);
    var kv = Object.values(letters);
    for (var i = 0; i < ks.length; i++) {
        for (var j = 0; j < fillColors.length; j++) {
            txt[ks[i] + j] = customSprite(kv[i], 2, "0", fillColors[j]);
        }
    }
}

function txt_(str, x = 0, y = 0, col = 0, sz = 15, ctr) {
    var st = str.split('');
    imageMode(CORNER);
    for (var s = 0; s < st.length; s++) {
        if (parseInt(st[s]) || st[s] == "0") {
            st[s] += "-";
        }
        st[s] += col;
        if (!ctr) {
            image(txt[st[s]], x + (s * (sz + (sz / 5))), y, sz, sz);
        } else {
            image(txt[st[s]], x + (s * (sz + (sz / 5))) - (((st.length + 1) * sz) / 2), y, sz, sz);
        }
    }
    imageMode(CENTER);
}

function _txt(str, x = 0, y = 0, col = 0, sz = 15, ctr) {
    var st = str.split('\n');
    for (var s = 0; s < st.length; s++) {
        txt_(st[s], x, y + (s * (sz + (sz / 3 + 2))), col, sz, ctr);
    }
}

function polygon(arr) {
    beginShape();
    for (var i = 0; i < arr.length; i++) {
        vertex(arr[i][0], arr[i][1]);
    }
    endShape();
}

function Bullet(t, x, y, stats) {
    this.t = t;
    this.x = x;
    this.y = y;
    this.r = stats.r;
    this.speed = stats.speed;
    this.dot = stats.dot || 0;
    this.damage = stats.damage || 0;
    this.slowdown = stats.slowdown || 0;
    this.pierce = stats.pierce || 1;
    this.dead = false;
    this.al = stats.al || false;
    this.hitting = false;
}
Bullet.prototype.run = function() {
    imageMode(CENTER);
    push();
    translate(this.x, this.y);
    rotate(this.r);
    image(sprites[this.t], 0, 0);
    pop();
    this.x += cos(this.r) * this.speed;
    this.y += sin(this.r) * this.speed;

    if (this.pierce <= 0) {
        this.dead = true;
    }

    if (this.x < 0 || this.y < 0 || this.x > width || this.y > height) {
        this.dead = true;
    }

}

function updateTower(tw) {
    switch (tw.t) {
        case "gun1":
            tw.damage = 2;
            tw.speed = 7.5;
            tw.cost = 75;
            tw.next = "gun2";
            tw.nextCost = 100;
            tw.name = "boosted cannon";
            break;
        case "gun2":
            tw.damage = 3;
            tw.speed = 8.5;
            tw.cost = 100;
            tw.next = "gun3";
            tw.nextCost = 150;
            tw.name = "heavy cannon";
            break;
        case "gun3":
            tw.damage = 8;
            tw.speed = 15;
            tw.cost = 150;
            tw.next = "gun4";
            tw.nextCost = 200;
            tw.name = "fang-21";
            tw.pierce = 2;
            tw.range = 100;
            tw.rate = 40;
            break;
        case "gun4":
            tw.damage = 8;
            tw.speed = 15;
            tw.cost = 300;
            tw.next = "gun5";
            tw.nextCost = 400;
            tw.name = "viper-77";
            tw.pierce = 2;
            tw.range = 150;
            tw.rate = 80;
            tw.fireType = "double";
            break;
        case "gun5":
            tw.damage = 8;
            tw.speed = 15;
            tw.cost = 400;
            tw.next = "max";
            tw.nextCost = Infinity;
            tw.name = "SoulSmiter-77A";
            tw.pierce = 2;
            tw.range = 150;
            tw.rate = 10;
            tw.fireType = "single";
            break;
        case "gun6":
            tw.damage = 5;
            tw.speed = 7.5;
            tw.cost = 100;
            tw.rate = 50;
            tw.next = "gun7";
            tw.nextCost = 200;
            tw.name = "bloodshed cannon";
            tw.bulletType = "b2";
            tw.base = "base3";
            break;
        case "gun7":
            tw.damage = 7;
            tw.speed = 9;
            tw.cost = 200;
            tw.rate = 45;
            tw.next = "gun8";
            tw.pierce = 2;
            tw.nextCost = 350;
            tw.range = 125;
            tw.name = "TORMENTOR-X77";
            break;
        case "gun8":
            tw.damage = 7;
            tw.speed = 10;
            tw.cost = 350;
            tw.rate = 45;
            tw.next = "gun9";
            tw.nextCost = 500;
            tw.fireType = "double";
            tw.pierce = 2;
            tw.range = 150;
            tw.name = "CytoSpear-X3";
            break;
        case "gun9":
            tw.damage = 15;
            tw.speed = 10;
            tw.cost = 500;
            tw.rate = 40;
            tw.next = "gun10";
            tw.nextCost = 750;
            tw.fireType = "single";
            tw.pierce = 3;
            tw.range = 175;
            tw.bulletType = "b6"
            tw.name = "Cryotron-66B";
            break;
        case "gun10":
            tw.damage = 15;
            tw.speed = 10;
            tw.cost = 750;
            tw.rate = 15;
            tw.next = "gun11";
            tw.nextCost = 900;
            tw.fireType = "double";
            tw.pierce = 1;
            tw.bulletType = "b2";
            tw.name = "Panther-27";
            break;
        case "gun11":
            tw.damage = 15;
            tw.speed = 10;
            tw.cost = 900;
            tw.rate = 35;
            tw.range = 200;
            tw.next = "gun12";
            tw.nextCost = 1250;
            tw.fireType = "double";
            tw.pierce = 4;
            tw.bulletType = "b2";
            tw.name = "Hyrda-35";
            break;
        case "gun12":
            tw.damage = 25;
            tw.speed = 15;
            tw.cost = 1250;
            tw.rate = 20;
            tw.range = 225;
            tw.next = "gun13";
            tw.nextCost = 1500;
            tw.fireType = "single";
            tw.pierce = 4;
            tw.bulletType = "b2";
            tw.name = "Puma-225K";
            break;
        case "gun13":
            tw.damage = 15;
            tw.speed = 15;
            tw.cost = 1500;
            tw.rate = 10;
            tw.range = 225;
            tw.next = "max";
            tw.nextCost = Infinity;
            tw.fireType = "single";
            tw.pierce = 4;
            tw.bulletType = "b2";
            tw.name = "Jaguar-87";
            break;
        case "gun14":
            tw.base = "base5";
            tw.damage = 10;
            tw.speed = 1;
            tw.cost = 250;
            tw.pierce = 20;
            tw.next = "gun15";
            tw.nextCost = 300;
            tw.bulletType = "b11";
            tw.name = "Synthesizor cannon";
            break;
        case "gun15":
            tw.damage = 15;
            tw.cost = 300;
            tw.range = 125;
            tw.pierce = 20;
            tw.next = "gun16";
            tw.nextCost = 400;
            tw.bulletType = "b9";
            tw.name = "Fusitor 22K";
            break;
        case "gun16":
            tw.damage = 2.5 / 2;
            tw.cost = 400;
            tw.rate = 5;
            tw.range = 150;
            tw.pierce = 20;
            tw.next = "gun17";
            tw.fireType = "double";
            tw.nextCost = 500;
            tw.bulletType = "b10";
            tw.name = "Fury-X7";
            break;
        case "gun17":
            tw.damage = 2.5;
            tw.cost = 500;
            tw.rate = 5;
            tw.range = 150;
            tw.pierce = 20;
            tw.speed = 2;
            tw.next = "gun18";
            tw.fireType = "single";
            tw.nextCost = 400;
            tw.bulletType = "b13";
            tw.name = "Fusor-25X";
            break;
        case "gun18":
            tw.damage = 5;
            tw.cost = 500;
            tw.rate = 5;
            tw.range = 200;
            tw.pierce = 20;
            tw.speed = 2;
            tw.next = "max";
            tw.fireType = "single";
            tw.nextCost = Infinity;
            tw.bulletType = "b11";
            tw.name = "PhotonSpear";
            break;
        case "gun20":
            tw.base = "base7";
            break;
        case "gun27":
            tw.base = "base2";
            break;
        case "gun32":
            tw.base = "base6";
            break;
        case "gun35":
            tw.base = "base8";
            break;
    }
}

function Tower(t, x, y) {
    this.t = t;
    this.base = "base1";
    this.x = x;
    this.y = y;
    this.damage = 1;
    this.pierce = 1;
    this.speed = 5;
    this.r = 0;
    this.ar = 0;
    this.slowDown = 0;
    this.dot = 0;
    this.rate = 25;
    this.health = 10;
    this.shielded = false;
    this.shieldHealth = 100;
    this.bulletType = "b1";
    this.dead = false;
    this.range = 100;
    this.selected = false;
    this.cost = 50;
    this.next = "gun1";
    this.name = "laser cannon";
    this.nextCost = 75;
    this.fireType = "single";
    this.targets = 0;
    this.health = 25;
    this.maxHealth = 25;

    updateTower(this);

}

Tower.prototype.run = function() {
    for (var i = 0; i < bullets.length; i++) {
        var b = bullets[i];
        if (dist(b.x, b.y, this.x, this.y) <= 30 && b.al && !b.dead) {
            this.health -= b.damage;
            b.dead = true;
        }
    }

    imageMode(CENTER);
    var shooting = false;
    for (var i = 0; i < enemies.length; i++) {
        var e = enemies[i];
        var cond = dist(e.x, e.y, this.x, this.y) < this.range + e.rad && !e.dead;
        if (cond) {
            //this.r += (atan2(e.y - this.y, e.x - this.x) - this.r) / 10;

            if (this.targets === 1) {
                this.r = atan2(mouseY - this.y, mouseX - this.x);
            } else {
                this.r = atan2(e.y - this.y, e.x - this.x);
            }
            shooting = true;
        }
    }

    if (this.selected) {
        fill(0, 0, 0, 125);
        ellipse(this.x, this.y, 100, 100);
    }
    push();
    translate(this.x, this.y);
    if (dist(mouseX, mouseY, this.x, this.y) < 20 && !this.selected) {
        fill(255, 255, 255, 50);
        strokeWeight(1);
        stroke(200);
        ellipse(0, 0, this.range * 2, this.range * 2);
        _txt(this.name, 1, 21, 0, 10, true);
        _txt(this.name, -1, 19, 0, 10, true);
        _txt(this.name, 1, 19, 0, 10, true);
        _txt(this.name, -1, 21, 0, 10, true);
        _txt(this.name, 0, 20, 2, 10, true);
        csr = sprites.cursorp;
    }
    this.ar += (this.r - this.ar) / 5;
    image(sprites[this.base], 0, 0);
    rotate(this.ar);
    if (frameCount % this.rate === 0 && shooting) {
        translate(-cos(this.r) * 3, -sin(this.r) * 3);
    }
    image(sprites[this.t], 8, 0);
    pop();
    if (this.shielded) {
        if (this.maxHealth !== 100) {
            this.health = 100;
            this.maxHealth = 100;
        }
        if (this.health > 75) {
            image(sprites.shield1, this.x, this.y);
        } else if (this.health > 50 && this.health <= 75) {
            image(sprites.shield2, this.x, this.y);
        } else if (this.health < 50 && this.health > 25) {
            image(sprites.shield3, this.x, this.y);
        }
    }

    if (this.health < this.maxHealth) {
        fill(255, 0, 0);
        rect(this.x - 15, this.y - 15 - 5, (15 * 2), 2);
        fill(0, 255, 0);
        rect(this.x - 15, this.y - 15 - 5, (this.health / this.maxHealth) * (15 * 2), 2);
    }

    if (this.selected) {
        fill(255, 255, 255, 25);
        stroke(255);
        ellipse(this.x, this.y, 20, 20);
        image(sprites.upg, this.x, this.y - 30 + sin(frameCount) * 2.5, 20, 20);
        image(sprites.sll, this.x - 20, this.y - 20 + cos(frameCount) * 2.5, 20, 20);
        image(sprites.trg, this.x + 20, this.y - 20 - cos(frameCount) * 2.5, 20, 20);
        if (dist(mouseX, mouseY, this.x - 20, this.y - 20 + cos(frameCount) * 2.5) < 10) {
            _txt("+$" + Math.round(this.cost * 0.75), this.x, this.y + 20, 2, 10, true);
            csr = sprites.cursorp;
            if (clicked) {
                money += Math.round(this.cost * 0.75);
                this.dead = true;
                this.selected = false;
            }
        }
        if (dist(mouseX, mouseY, this.x, this.y - 30 + sin(frameCount) * 2.5) < 10) {
            csr = sprites.cursorp;
            if (money >= this.nextCost && this.next != "max") {
                if (clicked) {
                    money -= this.nextCost;
                    this.t = this.next;
                    updateTower(this);
                    this.selected = false;
                }
                _txt("-$" + this.nextCost, this.x, this.y + 20, 2, 10, true);
            } else if (this.next == "max") {
                csr = sprites.cursorn;
                _txt("Maxed", this.x, this.y + 20, 3, 10, true);
            } else {
                csr = sprites.cursorn;
                _txt("-$" + this.nextCost, this.x, this.y + 20, 3, 10, true);
            }
        }
        if (dist(mouseX, mouseY, this.x + 20, this.y - 20 - cos(frameCount) * 2.5) < 10) {
            if (!this.shielded) {
                if (money >= 100) {
                    csr = sprites.cursorp;
                    if (clicked) {
                        this.shielded = true;
                        money -= 100;
                    }
                    _txt("-$100", this.x, this.y + 20, 2, 10, true);
                } else {
                    csr = sprites.cursorn;
                    _txt("-$100", this.x, this.y + 20, 3, 10, true);
                }


            } else {
                csr = sprites.cursorn;
                _txt("Maxed", this.x, this.y + 20, 3, 10, true);
            }
        }
    }

    if (dist(mouseX, mouseY, this.x, this.y) < 20 && clicked) {
        for (var i = 0; i < towers.length; i++) {
            if (towers[i].selected) {
                towers[i].selected = false;
            }
        }
        this.selected = true;
    }
    if (shooting) {
        if (frameCount % this.rate == 0) {
            if (this.fireType == "single") {
                bullets.push(new Bullet(this.bulletType, this.x + cos(this.r) * 10, this.y + sin(this.r) * 10, {
                    damage: this.damage,
                    dot: this.dot,
                    slowdown: this.slowdown,
                    pierce: this.pierce,
                    r: this.ar,
                    speed: this.speed
                }));
            }
            if (this.fireType == "double") {
                bullets.push(new Bullet(this.bulletType, -5 + this.x + cos(this.r) * 10, this.y + sin(this.r) * 10, {
                    damage: this.damage,
                    dot: this.dot,
                    slowdown: this.slowdown,
                    pierce: this.pierce,
                    r: this.ar,
                    speed: this.speed
                }));
                bullets.push(new Bullet(this.bulletType, 5 + this.x + cos(this.r) * 10, this.y + sin(this.r) * 10, {
                    damage: this.damage,
                    dot: this.dot,
                    slowdown: this.slowdown,
                    pierce: this.pierce,
                    r: this.ar,
                    speed: this.speed
                }));
            }
        }
    }

    if (this.health <= 0) {
        this.dead = true;
    }

}
Tower.prototype.draw = function() {
    imageMode(CENTER);
    push();
    translate(this.x, this.y);
    image(sprites[this.base], 0, 0);
    rotate(this.ar);
    image(sprites[this.t], 8, 0);
    pop();
    if (dist(this.x, this.y, mouseX, mouseY) <= 15) {
        _txt("-$" + this.cost, this.x, this.y + 25, money >= this.cost ? 2 : 3, 12.5, true)
        if (money >= this.cost) {
            csr = sprites.cursorp;
            if (clicked) {
                towerMenu = false;
                towerSelected = new Tower(this.t, mouseX, mouseY);
            }
        } else {
            csr = sprites.cursorn;
        }
    }
}


function Enemy(t, x, y) {
    this.x = x;
    this.y = y;
    this.t = t;
    this.r = 0;
    this.ar = 0;
    this.trackPoint = 0;
    this.track = Math.floor(Math.random() * levelTracks[level].length);
    this.hidden = false;
    this.speed = 1;
    this.health = 5;
    this.maxHealth = 5;
    this.damage = 1;
    this.dead = false;
    this.moving = true;
    this.rad = 10;
    this.rew = 1;
    this.rate = false;

    switch (this.t) {
        case "enemy2":
            this.health = 15;
            this.maxHealth = 15;
            this.speed = 0.75;
            this.rad = 15;
            break;
        case "enemy3":
            this.health = 3;
            this.maxHealth = 3;
            this.speed = 2;
            this.rad = 10;
            break;
        case "enemy4":
            this.health = 7;
            this.maxHealth = 7;
            this.speed = 2;
            this.rad = 10;
            break;
        case "enemy5":
            this.health = 20;
            this.maxHealth = 20;
            this.speed = 0.75;
            this.rad = 15;
            break;
        case "enemy6":
            this.health = 30;
            this.maxHealth = 30;
            this.speed = 1;
            this.rad = 15;
            break;
        case "enemy7":
            this.health = 50;
            this.maxHealth = 50;
            this.speed = 0.5;
            this.rad = 15;
            this.rate = 100;
            break;

    }
}
Enemy.prototype.run = function() {
    var track = levelTracks[level][this.track][this.trackPoint];

    for (var i = 0; i < bullets.length; i++) {
        var b = bullets[i];
        if (dist(b.x, b.y, this.x, this.y) < this.rad && !b.dead && !b.hitting && !b.al) {
            this.health -= b.damage;
            b.pierce--;
            b.hitting = true;
        }
        if (dist(b.x, b.y, this.x, this.y) >= this.rad) {
            b.hitting = false;
        }
    }

    push();
    translate(this.x, this.y);
    rotate(this.ar);
    imageMode(CENTER);
    image(sprites[this.t], 0, 0);
    pop();

    if (this.health < this.maxHealth) {
        fill(255, 0, 0);
        rect(this.x - this.rad, this.y - this.rad - 5, (this.rad * 2), 2);
        fill(0, 255, 0);
        rect(this.x - this.rad, this.y - this.rad - 5, (this.health / this.maxHealth) * (this.rad * 2), 2);
    }
    this.r = atan2(track[1] - this.y, track[0] - this.x);
    this.ar += (this.r - this.ar) / 10;
    if (this.moving) {
        this.x += cos(this.r) * this.speed;
        this.y += sin(this.r) * this.speed;
    }
    var distance = Math.floor(dist(this.x, this.y, track[0], track[1]));
    if (distance < this.speed) {
        this.trackPoint++;
        track = levelTracks[level][this.track][this.trackPoint];
        this.r = atan2(track[1] - this.y, track[0] - this.x);

    }
    if (this.trackPoint == levelTracks[level][this.track].length - 1 && !this.dead) {
        lives -= this.damage;
        deathCount++;
        this.dead = true;
    }
    if (this.health <= 0 && !this.dead) {
        money += this.rew;
        kills++;
        deathCount++;
        this.dead = true;
    }





    //special aliens
    if (this.t === "enemy7") {
        if (frameCount % this.rate === 0) {
            /*bullets.push(new Bullet(this.bulletType, this.x + cos(this.r) * 10, this.y + sin(this.r) * 10, {
                    damage: this.damage,
                    dot: this.dot,
                    slowdown: this.slowdown,
                    pierce: this.pierce,
                    r: this.ar,
                    speed: this.speed
                })); */

            bullets.push(new Bullet("b1", this.x + cos(this.ar + 45) * 15, this.y + sin(this.r + 45) * 15, {
                damage: 1,
                r: this.ar,
                al: true,
                speed: 10,
            }))
            bullets.push(new Bullet("b1", this.x + cos(this.ar - 45) * 15, this.y + sin(this.r - 45) * 15, {
                damage: 1,
                r: this.ar,
                al: true,
                speed: 10,
            }))
        }
    }

};

var ex = 0;
towers = [
    //new Tower("gun0", 100, 100),
    //new Tower("gun6", 200, 200)
]
var exampleTowers = [
    new Tower("gun0", 1140, 60),
    new Tower("gun6", 1140, 130),
    new Tower("gun14", 1140, 200),
    new Tower("gun20", 1140, 270),
    new Tower("gun27", 1140, 340),
    new Tower("gun32", 1140, 410),
    new Tower("gun35", 1140, 480),
    new Tower("gun25", 1140, 550),
];

function setup() {
    createCanvas(1200, 600);
    angleMode(DEGREES);
    frameRate(60);
    loadSprites();
    loadText();
    imageMode(CENTER);
    bbar = renderSprite(art.bbar, 20);
    csr = sprites.cursor1;
    sprites.tmenu = renderSprite(art.tmenu, 20);
}

function parseLevel(lvl) {
    imageMode(CORNER);
    var bitmap = levelBitmaps[lvl];
    for (var i = 0; i < bitmap.length; i++) {
        for (var j = 0; j < bitmap[i].length; j++) {
            if (bitmap[i][j] === " ") {
                image(sprites.ground1, j * 50, i * 50);
            } else if (bitmap[i][j] === "c") {
                image(sprites.ground2, j * 50, i * 50)
            } else if (bitmap[i][j] === "C") {
                image(sprites.ground4, j * 50, i * 50)
            } else if (bitmap[i][j] === "S") {
                image(sprites.ground3, j * 50, i * 50)
            } else if (bitmap[i][j] === "ß") {
                image(sprites.ground11, j * 50, i * 50)
            } else if (bitmap[i][j] === "-") {
                image(sprites.trackS, j * 50, i * 50)
            } else if (bitmap[i][j] === "w") {
                image(sprites.trackT, j * 50, i * 50)
            } else if (bitmap[i][j] === "q") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(-90)
                translate(-25, -25);
                image(sprites.trackT, 0, 0);
                pop();
            } else if (bitmap[i][j] === "a") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(-180)
                translate(-25, -25);
                image(sprites.trackT, 0, 0);
                pop();
            } else if (bitmap[i][j] === "s") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(-270)
                translate(-25, -25);
                image(sprites.trackT, 0, 0);
                pop();
            } else if (bitmap[i][j] === "+") {
                image(sprites.trackCr, j * 50, i * 50)
            } else if (bitmap[i][j] === "|") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.trackS, 0, 0);
                pop();
            } else if (bitmap[i][j] === "T") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.trackTh, 0, 0);
                pop();
            } else if (bitmap[i][j] === "f") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(0)
                translate(-25, -25);
                image(sprites.trackTh, 0, 0);
                pop();
            } else if (bitmap[i][j] === "h") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(180)
                translate(-25, -25);
                image(sprites.trackTh, 0, 0);
                pop();
            } else if (bitmap[i][j] === "v") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(270)
                translate(-25, -25);
                image(sprites.trackTh, 0, 0);
                pop();
            } else if (bitmap[i][j] === "[") {
                image(sprites.ground6, j * 50, i * 50)
            } else if (bitmap[i][j] === "]") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(-90)
                translate(-25, -25);
                image(sprites.ground6, 0, 0);
                pop();
            } else if (bitmap[i][j] === "{") {
                image(sprites.ground5, j * 50, i * 50)
            } else if (bitmap[i][j] === "}") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(-90)
                translate(-25, -25);
                image(sprites.ground5, 0, 0);
                pop();
            } else if (bitmap[i][j] === ";") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(270)
                translate(-25, -25);
                image(sprites.ground7, 0, 0);
                pop();
            } else if (bitmap[i][j] === '"') {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(0)
                translate(-25, -25);
                image(sprites.ground7, 0, 0);
                pop();
            } else if (bitmap[i][j] === "/") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.ground7, 0, 0);
                pop();
            } else if (bitmap[i][j] === ".") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(180)
                translate(-25, -25);
                image(sprites.ground7, 0, 0);
                pop();
            } else if (bitmap[i][j] === "9") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(270)
                translate(-25, -25);
                image(sprites.ground8, 0, 0);
                pop();
            } else if (bitmap[i][j] === '0') {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(0)
                translate(-25, -25);
                image(sprites.ground8, 0, 0);
                pop();
            } else if (bitmap[i][j] === "p") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.ground8, 0, 0);
                pop();
            } else if (bitmap[i][j] === "z") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(0)
                translate(-25, -25);
                image(sprites.ground9, 0, 0);
                pop();
            } else if (bitmap[i][j] === "Z") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.ground9, 0, 0);
                pop();
            } else if (bitmap[i][j] === "x") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(0)
                translate(-25, -25);
                image(sprites.ground10, 0, 0);
                pop();
            } else if (bitmap[i][j] === "X") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(90)
                translate(-25, -25);
                image(sprites.ground10, 0, 0);
                pop();
            } else if (bitmap[i][j] === "o") {
                push();
                translate(j * 50 + 25, i * 50 + 25);
                rotate(180)
                translate(-25, -25);
                image(sprites.ground8, 0, 0);
                pop();
            }
        }
    }

}

function draw() {
    csr = sprites.cursor1;
    if (scene == "game") {
        if (keys[")"]) { scene = "test"; }
        background(180, 180, 240);

        if (waveStarted) {
            if (frameCount % eInt === 0) {
                if (spawnCount < waves[wave][0].length) {
                    spawnCount++;
                    enemies.push(new Enemy(eTypes[waves[wave][0][spawnCount - 1]], levelTracks[level][0][0][0], levelTracks[level][0][0][1]));

                }
            }
        }
        if (waves[wave][0].length === deathCount && waveStarted) {
            deathCount = 0;
            spawnCount = 0;
            if (waves[wave][2]) {
                money += waves[wave][2];
            }
            wave++;
            waveStarted = false;
            canStartWave = true;
        }

        parseLevel(0)

        cursor("none");
        if (clicked) {
            for (var ii = 0; ii < towers.length; ii++) {
                if (towers[ii].selected && dist(mouseX, mouseY, towers[ii].x, towers[ii].y) > 50) {
                    towers[ii].selected = false;
                }
            }
        }


        for (var b = 0; b < bullets.length; b++) {
            if (!bullets[b].dead) {
                bullets[b].run();
            }
        }

        for (var i = 0; i < enemies.length; i++) {
            if (!enemies[i].dead) {
                enemies[i].run();
            }
        }

        for (var t = 0; t < towers.length; t++) {
            if (!towers[t].dead) {
                towers[t].run();
            }
        }

        if (towerSelected) {
            towerSelected.x = mouseX;
            towerSelected.y = mouseY;
            towerSelected.draw();
            if (clicked && !towerMenu) {
                money -= towerSelected.cost;
                towers.push(new Tower(towerSelected.t, mouseX, mouseY));
                towerSelected = false;
            }

            if (keys['Escape']) {
                towerSelected = false;
            }
        }


        if (frameCount % 25 === 0) {
            fps = frameRate();
        }
        _txt("FPS: " + Math.round(fps), 20, 20, 2, 12.5);


        fill(50);
        noStroke();
        rect(0, 495, 15 * 20, 5)
        rect(1200 - (15 * 20), 495, 15 * 20, 5);
        rect(300, 475, 40, 5);
        rect(900, 475, 40, 5);
        rect(17 * 20, 455, 560, 5);
        imageMode(CORNER);
        image(bbar, 0, 400);
        image(sprites.button3, 940, 520, 60, 60);
        image(sprites.button1, 1020, 520, 60, 60);
        image(sprites.button2, 1100, 520, 60, 60);

        if (mouseX > 1020 && mouseY > 520 && mouseX < 1020 + 60 && mouseY < 520 + 60) {
            csr = sprites.cursorp;
            if (clicked) {
                towerMenu = true;
            }
        }

        if (towerMenu) {
            image(sprites.tmenu, width - 200, 0);
            for (var i = 0; i < exampleTowers.length; i++) {
                exampleTowers[i].draw();
            }
            if (mouseX < 1100 && !(mouseX > 1020 && mouseY > 520 && mouseX < 1020 + 60 && mouseY < 520 + 60) && clicked) {
                towerMenu = false;
            }
        }

        if (!canStartWave) {
            fill(0, 0, 0, 150);
            stroke(150, 0, 0);
            rect(940, 520, 60, 60);
            noStroke();
        } else {
            fill(0, 0, 0, 0);
            stroke(0, 255, 0);
            rect(940, 520, 60, 60);
            noStroke();
        }
        imageMode(CENTER);
        _txt("wave " + (wave + 1), 25, 532, 2, 12.5)
        _txt("$" + money, 145, 532, 2, 12.5)
        _txt(waves[wave][1], 370, 490, 2, 12.5);
        _txt(lives + "HP", 790, 550, 2, 12.5);



        if (mouseX > 940 && mouseX < 940 + 60 && mouseY > 520 && mouseY < 520 + 60) {
            if (canStartWave) {
                csr = sprites.cursorp;
                if (clicked) {
                    waveStarted = true;
                    canStartWave = false;
                }
            } else {
                csr = sprites.cursorn;
            }
        }

        imageMode(CORNER);
        image(csr, mouseX, mouseY);

    }
    if (scene == "test") {
        background(180, 180, 240);
        var sprts = Object.keys(sprites);
        for (var i = 0; i < sprts.length; i++) {
            image(sprites[sprts[i]], i * 100 + ex, 300);
            _txt(sprts[i], i * 100 + ex, 250, 0, 8, true);
        }
        if (keys["ArrowLeft"]) {
            ex += 15;
        }
        if (keys['ArrowRight']) {
            ex -= 15;
        }
        if (keys['(']) {
            scene = "game";
        }
    }
    if (clicked) {
        clicked = false;
    }
}

function mouseClicked() {
    clicked = true;
    /*setTimeout(function() {
        clicked = false;
    }, Math.round(frameRate()) / 5);*/
}

function keyPressed() {
    keys[key] = true;
}

function keyReleased() {
    keys[key] = false;
}
